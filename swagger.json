{
  "components": {
    "schemas": {
      "APIKeyResponseModel": {
        "properties": {
          "key": {
            "example": "__V0EzoV/gzEBsKsPg8ttrjf4qq/7OerqfSTVY8W",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AirtableButton": {
        "properties": {
          "label": {
            "description": "The button label",
            "example": "Make Document",
            "title": "label",
            "type": "string"
          },
          "url": {
            "description": "The URL that should be opened when the button is clicked",
            "example": "https://airtable.com/tbljnMFy6nqsFHFR7/recIXIpWdiuZd9VYg?blocks=blxYtqVDViGvyu90b",
            "title": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Assignment": {
        "properties": {
          "billingAllocation": { "example": 0, "type": "number" },
          "endDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "id": {
            "description": "Unique identifer for Assignment.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "project": { "$ref": "#/components/schemas/AssignmentProject" },
          "resourcingStatus": { "example": "String", "type": "string" },
          "role": { "$ref": "#/components/schemas/AssignmentRole" },
          "sow": { "$ref": "#/components/schemas/AssignmentSow" },
          "startDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "teamMember": { "$ref": "#/components/schemas/AssignmentTeamMember" },
          "timingAllocation": { "example": 0, "type": "number" }
        },
        "type": "object"
      },
      "AssignmentProject": {
        "properties": {
          "id": {
            "description": "Unique identifer for Project",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignmentRole": {
        "properties": {
          "id": {
            "description": "Unique identifer for Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignmentSow": {
        "properties": {
          "id": {
            "description": "Unique identifer for SOW",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignmentTeamMember": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team Member",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthenticatedUserTokenModel": {
        "properties": {
          "token": {
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InJvbmFsZC5rYXNlbmR3YUB0aGVvcmVtb25lLmNvIiwibmFtZSI6IlJvbmFsZCBNLiBLYXNlbmR3YSIsInBlcm1pc3Npb25zIjpbIkFMTF9GVU5DVElPTlMiXSwiaWF0IjoxNjczMTI2MDQ3LCJleHAiOjE2NzMyMTI0NDcsImF1ZCI6InRhdGVhbSIsInN1YiI6InJlY1NjcnpCdlFkN2RiRlUwIn0.xaWNkrfOrA6bt1p0M2ts31MTUbst_OLY2xEtDC1ONPM",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BadRequest": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": { "$ref": "#/components/schemas/GenericError" },
            "type": "array"
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "default": "BAD_REQUEST",
            "description": "The error name",
            "example": "BAD_REQUEST",
            "minLength": 1,
            "type": "string"
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string"
          },
          "status": {
            "default": 400,
            "description": "The status code of the exception",
            "example": 400,
            "type": "number"
          }
        },
        "required": ["name", "message", "status"],
        "type": "object"
      },
      "Candidate": {
        "properties": {
          "canRequestCompanyLaptop": { "example": "String", "type": "object" },
          "email": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Candidate.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "isSnoozed": { "example": true, "type": "boolean" },
          "leverLink": { "example": "String", "type": "string" },
          "linkToCountry": {
            "$ref": "#/components/schemas/CandidateLinkToCountry"
          },
          "name": { "example": "String", "type": "string" },
          "pipelines": { "type": "array" },
          "position": { "example": "String", "type": "string" },
          "practicalAssignment": { "type": "array" },
          "ratingOverall": { "example": 0, "type": "number" },
          "reqs": { "type": "array" },
          "role": { "example": "String", "type": "string" },
          "signup": { "$ref": "#/components/schemas/CandidateSignup" },
          "stage": { "example": "String", "type": "string" },
          "timezone": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "CandidateLinkToCountry": {
        "properties": {
          "abbreviation": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Link to Country",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "CandidateSignup": {
        "properties": {
          "id": {
            "description": "Unique identifer for Signup",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "preferredName": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "Client": {
        "properties": {
          "brand": { "type": "array" },
          "companyId": { "example": 0, "type": "number" },
          "id": {
            "description": "Unique identifer for Client.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "website": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "Country": {
        "properties": {
          "countryCode": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Country.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "DeleteAirtableRecordResponse": {
        "properties": {
          "delete": {
            "description": "Whether the Topology Permission was deleted or not",
            "example": true,
            "title": "delete",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifer of the deleted Topology Permission",
            "example": "recM9m1bZOccF2TY0",
            "title": "id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteUserAPIKeyResponseModel": {
        "properties": { "existedAndWasDeleted": { "type": "boolean" } },
        "type": "object"
      },
      "Department": {
        "properties": {
          "id": {
            "description": "Unique identifer for Department.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "Feedback": {
        "properties": {
          "candidate": { "$ref": "#/components/schemas/FeedbackCandidate" },
          "feedbackForm": { "type": "array" },
          "feedbackSubmitted": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "id": {
            "description": "Unique identifer for Feedback.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "interview": { "$ref": "#/components/schemas/FeedbackInterview" },
          "leverID": { "example": "String", "type": "string" },
          "pipeline": { "type": "array" },
          "rating": { "example": 0, "type": "number" },
          "submittedBy": { "$ref": "#/components/schemas/FeedbackSubmittedBy" }
        },
        "type": "object"
      },
      "FeedbackCandidate": {
        "properties": {
          "id": {
            "description": "Unique identifer for Candidate",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeedbackInterview": {
        "properties": {
          "id": {
            "description": "Unique identifer for Interview",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeedbackSubmittedBy": {
        "properties": {
          "id": {
            "description": "Unique identifer for Submitted By",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "picture": { "example": "https://example.com", "type": "string" }
        },
        "type": "object"
      },
      "FindAllAssignmentsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Assignments.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllCandidatesReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Candidates.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllClientsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Clients.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllCountriesReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Countries.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllDepartmentsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Departments.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllFeedbacksReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Feedbacks.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllInterviewsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Interviews.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllPositionsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Positions.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllPracticalAssignmentsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Practical Assignments.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllPracticalsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Practicals.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllProjectsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Projects.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllREQsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of REQs.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllRolesReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Roles.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllSOWsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of SOWs.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllSignupsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Signups.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllStatesReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of States.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllTeamAssignmentsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Team Assignments.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllTeamMemberTypesReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Team Member Types.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllTeamMembersReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Team Members.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllTeamsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Teams.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "FindAllTopologyPermissionsReponse": {
        "properties": {
          "offset": {
            "description": "The airtable offset identifier in case there are more records to fetch.",
            "type": "string"
          },
          "records": {
            "description": "The list of Topology Permissions.",
            "example": [],
            "type": "array"
          }
        },
        "type": "object"
      },
      "GenericError": {
        "additionalProperties": true,
        "properties": {
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "The error name",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": ["name", "message"],
        "type": "object"
      },
      "Interview": {
        "properties": {
          "candidate": { "$ref": "#/components/schemas/InterviewCandidate" },
          "candidateStage": { "example": "String", "type": "string" },
          "feedback": { "type": "array" },
          "feedbackForm": { "type": "array" },
          "formName": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Interview.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "interviewDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "interviewers": { "type": "array" },
          "leverID": { "example": "String", "type": "string" },
          "pipelines": { "type": "array" },
          "status": { "example": 0, "type": "object" }
        },
        "type": "object"
      },
      "InterviewCandidate": {
        "properties": {
          "id": {
            "description": "Unique identifer for Candidate",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "NotFound": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": { "$ref": "#/components/schemas/GenericError" },
            "type": "array"
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "default": "NOT_FOUND",
            "description": "The error name",
            "example": "NOT_FOUND",
            "minLength": 1,
            "type": "string"
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string"
          },
          "status": {
            "default": 404,
            "description": "The status code of the exception",
            "example": 404,
            "type": "number"
          }
        },
        "required": ["name", "message", "status"],
        "type": "object"
      },
      "Position": {
        "properties": {
          "assignments": { "example": "String", "type": "string" },
          "created": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "id": {
            "description": "Unique identifer for Position.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "plannedBillingAllocation": { "example": 0, "type": "number" },
          "plannedEndDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "plannedStartDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "plannedTimeAllocation": { "example": 0, "type": "number" },
          "rateCard": { "type": "array" },
          "resourcing": { "example": "String", "type": "string" },
          "role": { "type": "array" },
          "sows": { "type": "array" },
          "status": { "example": "String", "type": "string" },
          "team": { "$ref": "#/components/schemas/PositionTeam" }
        },
        "type": "object"
      },
      "PositionTeam": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "program": { "example": "String", "type": "string" },
          "projectId": { "example": "String", "type": "object" },
          "recordId": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "Practical": {
        "properties": {
          "accessories": { "type": "object" },
          "assessors": { "type": "array" },
          "description": { "example": "String", "type": "string" },
          "distributionValue": { "example": 0, "type": "number" },
          "expectedHours": { "type": "object" },
          "feedbackTemplate": { "type": "array" },
          "field34": { "example": "String", "type": "string" },
          "githubAssessorTeam": { "example": "String", "type": "string" },
          "githubOrganization": { "example": "String", "type": "string" },
          "githubRepositoryTemplate": { "example": "String", "type": "string" },
          "githubReviewTeams": { "type": "object" },
          "id": {
            "description": "Unique identifer for Practical.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "interviewComponent": { "example": true, "type": "boolean" },
          "name": { "example": "String", "type": "string" },
          "observers": { "type": "array" },
          "pipelines": { "type": "array" },
          "pipelines2": { "example": "String", "type": "string" },
          "practicalAssignments": { "type": "array" },
          "practicalGuideURL": { "example": "String", "type": "string" },
          "practicalInviteTemplates": { "example": "String", "type": "string" },
          "practicalStartedMessageTemplate": {
            "example": "String",
            "type": "string"
          },
          "recordId": { "example": "String", "type": "object" },
          "roles": { "type": "array" },
          "shortName": { "example": "String", "type": "string" },
          "signups": { "type": "array" },
          "stages": { "type": "array" },
          "status": { "example": "String", "type": "string" },
          "type": { "example": "String", "type": "string" },
          "whatsEvaluated": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "PracticalAssignment": {
        "properties": {
          "activePracticalEngagementStatus": {
            "example": "String",
            "type": "string"
          },
          "actualEndDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "actualStartDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "archived": { "example": true, "type": "boolean" },
          "archivedOnDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "assessorLastSlackActivityDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "assessorSlackActivityCount": { "example": 0, "type": "number" },
          "candidate": {
            "$ref": "#/components/schemas/PracticalAssignmentCandidate"
          },
          "candidateFirstSlackActivityDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "candidateGithubUsername": { "example": "String", "type": "string" },
          "candidateInvitedOnDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "candidateJoinedOnDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "candidateLastGithubCommitDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "candidateLastSlackActivityDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "candidateNonResponsive": { "example": true, "type": "boolean" },
          "candidateRecruiterSlackUID": {
            "example": "String",
            "type": "string"
          },
          "candidateSlackActivityCount": { "example": 0, "type": "number" },
          "candidateSlackUID": { "example": "String", "type": "string" },
          "candidateSlackUserExpired": { "example": true, "type": "boolean" },
          "candidateTimezone": { "example": "String", "type": "string" },
          "createdByAppID": { "example": "String", "type": "string" },
          "createdDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "createdOn": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "creatorSlackUID": { "example": "String", "type": "string" },
          "currentSlackChannelName": { "example": "String", "type": "string" },
          "daysSince": { "example": "String", "type": "object" },
          "distributionRequested": { "example": true, "type": "boolean" },
          "expectedEndDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "expectedStartDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "experimentalAssessment": { "example": "String", "type": "string" },
          "experimentalMonthPeriod": { "example": "String", "type": "object" },
          "experimentalQualification": {
            "example": "String",
            "type": "object"
          },
          "experimentalQualifiedCount": {
            "example": "String",
            "type": "object"
          },
          "experimentalQueueStatus": { "example": "String", "type": "object" },
          "experimentalRawSeniorityRating": { "example": 0, "type": "number" },
          "experimentalRetention": { "example": "String", "type": "object" },
          "experimentalReviewPriority": {
            "example": "String",
            "type": "object"
          },
          "experimentalSeniorityLevel": {
            "example": "String",
            "type": "string"
          },
          "experimentalWeekCompleted": {
            "example": "String",
            "type": "object"
          },
          "experimentalWeekPeriod": { "example": "String", "type": "object" },
          "fallbackPipeline": {
            "$ref": "#/components/schemas/PracticalAssignmentFallbackPipeline"
          },
          "feedback": { "type": "array" },
          "field97": { "example": "String", "type": "string" },
          "githubRepository": {
            "example": "https://example.com",
            "type": "string"
          },
          "githubRepositorySlug": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Practical Assignment.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "lastModifiedOn": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "leverNoteId": { "example": "String", "type": "string" },
          "name": { "example": "String", "type": "object" },
          "numberOfBranchesOnGithubRepository": {
            "example": 0,
            "type": "number"
          },
          "numberOfCommitsOnGithubRepository": {
            "example": 0,
            "type": "number"
          },
          "numberOfPullRequestsOnGithubRepository": {
            "example": 0,
            "type": "number"
          },
          "practical": {
            "$ref": "#/components/schemas/PracticalAssignmentPractical"
          },
          "practicalAssignmentComments": {
            "example": "String",
            "type": "string"
          },
          "practicalAssignmentRecordid": {
            "example": "String",
            "type": "object"
          },
          "practicalDistributionRequestLink": {
            "example": "String",
            "type": "object"
          },
          "practicalDistributionTracker": {
            "$ref": "#/components/schemas/PracticalAssignmentPracticalDistributionTracker"
          },
          "practicalFeedbackCount": { "example": 0, "type": "number" },
          "processed": { "example": true, "type": "boolean" },
          "prototypeFeedback": { "type": "array" },
          "recordURL": { "example": "String", "type": "object" },
          "sendRequest": { "$ref": "#/components/schemas/AirtableButton" },
          "sendRequested": { "example": true, "type": "boolean" },
          "signups": { "type": "array" },
          "slackChannelId": { "example": "String", "type": "string" },
          "status": { "example": "String", "type": "string" },
          "timeToFinish": { "type": "object" },
          "triageStatus": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "PracticalAssignmentCandidate": {
        "properties": {
          "country": { "example": "String", "type": "string" },
          "department": { "type": "array" },
          "email": { "example": "String", "type": "string" },
          "experimentalCandidateAdvocate": {
            "example": ["String"],
            "type": "array"
          },
          "id": {
            "description": "Unique identifer for Candidate",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "interviewFeedbackForms": { "example": ["String"], "type": "array" },
          "interviewStatuses": { "example": [0], "type": "array" },
          "interviews": { "example": "String", "type": "string" },
          "leverLink": { "example": "String", "type": "string" },
          "linkedinUrl": { "example": "String", "type": "string" },
          "name": { "example": "String", "type": "string" },
          "opportunityId": { "example": "String", "type": "string" },
          "pipelineName": { "example": ["String"], "type": "array" },
          "pipelineShortName": { "example": ["String"], "type": "array" },
          "pipelines": { "example": "String", "type": "string" },
          "position": { "example": "String", "type": "string" },
          "ratingOverall": { "example": 0, "type": "number" },
          "recordId": { "example": "String", "type": "object" },
          "recruitmentBlockSlackChannelId": {
            "example": ["String"],
            "type": "array"
          },
          "role": { "example": "String", "type": "string" },
          "seniorityRatingAverage": { "example": 0, "type": "number" },
          "seniorityRatingSd": { "example": 0, "type": "number" },
          "squadSlackGroupUID": { "example": ["String"], "type": "array" },
          "stage": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "PracticalAssignmentFallbackPipeline": {
        "properties": {
          "id": {
            "description": "Unique identifer for Fallback Pipeline",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PracticalAssignmentPractical": {
        "properties": {
          "accessories": { "type": "array" },
          "assessorNames": { "example": ["String"], "type": "array" },
          "assessorSlackUids": { "example": ["String"], "type": "array" },
          "assessors": { "example": "String", "type": "string" },
          "distributionValue": { "example": 0, "type": "number" },
          "expectedHours": { "type": "object" },
          "feedbackTemplate": { "example": "String", "type": "string" },
          "githubAssessorTeam": { "example": "String", "type": "string" },
          "githubOrganization": { "example": "String", "type": "string" },
          "githubRepositoryTemplate": { "example": "String", "type": "string" },
          "githubReviewTeams": { "type": "array" },
          "id": {
            "description": "Unique identifer for Practical",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "observerSlackUids": { "example": ["String"], "type": "array" },
          "practicalStartedMessageTemplate": {
            "example": "String",
            "type": "string"
          },
          "reviewerNames": { "example": ["String"], "type": "array" },
          "reviewerSlackUids": { "example": ["String"], "type": "array" },
          "reviewers": { "example": ["String"], "type": "array" },
          "shortName": { "example": "String", "type": "string" },
          "status": { "example": "String", "type": "string" },
          "type": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "PracticalAssignmentPracticalDistributionTracker": {
        "properties": {
          "id": {
            "description": "Unique identifer for Practical Distribution Tracker",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Project": {
        "properties": {
          "additionalInformation": {
            "example": "https://example.com",
            "type": "string"
          },
          "assignments": { "type": "array" },
          "client": { "type": "array" },
          "currentTeamCountries": { "type": "object" },
          "departments": { "type": "array" },
          "description": { "example": "String", "type": "string" },
          "group": { "$ref": "#/components/schemas/ProjectGroup" },
          "hiredForThisProgram": { "type": "array" },
          "id": {
            "description": "Unique identifer for Project.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "newTeamMemberRequest": { "example": "String", "type": "string" },
          "openReqs": { "example": "String", "type": "string" },
          "opentReqsCount": { "example": 0, "type": "number" },
          "partner": { "$ref": "#/components/schemas/ProjectPartner" },
          "peopleList": { "example": "String", "type": "string" },
          "peopleList2": { "example": "String", "type": "string" },
          "peopleListCopy": { "example": "String", "type": "string" },
          "positions": { "example": "String", "type": "string" },
          "program": { "$ref": "#/components/schemas/ProjectProgram" },
          "project": { "example": "String", "type": "string" },
          "projectEndDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "projectStartDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "recordId": { "example": "String", "type": "object" },
          "reqs": { "type": "array" },
          "reqs2": { "type": "array" },
          "reqsCopy": { "example": "String", "type": "string" },
          "resourcing": { "type": "array" },
          "sows": { "type": "array" },
          "status": { "example": "String", "type": "object" },
          "teamMemberCountryRollupFromResourcing": { "type": "object" },
          "teams": { "type": "array" }
        },
        "type": "object"
      },
      "ProjectGroup": {
        "properties": {
          "groupName": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Group",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectPartner": {
        "properties": {
          "id": {
            "description": "Unique identifer for Partner",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectProgram": {
        "properties": {
          "id": {
            "description": "Unique identifer for Program",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "REQ": {
        "properties": {
          "allocations": { "example": "String", "type": "string" },
          "calculatedClosedDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "object"
          },
          "calculatedProject": { "example": "String", "type": "object" },
          "calculatedProjectLink": {
            "$ref": "#/components/schemas/REQCalculatedProjectLink"
          },
          "candidateRequestForm": { "example": "String", "type": "object" },
          "closedDateOverride": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "daysOpen": { "example": 0, "type": "object" },
          "filledBy": { "type": "array" },
          "hiringManager": { "$ref": "#/components/schemas/REQHiringManager" },
          "id": {
            "description": "Unique identifer for REQ.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "lastModified": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "lastModifiedBy": { "type": "object" },
          "lateStageCandidate": {
            "$ref": "#/components/schemas/REQLateStageCandidate"
          },
          "legacyOpenDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "openDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "object"
          },
          "pipelines": { "type": "array" },
          "positions": { "example": "String", "type": "string" },
          "project": { "$ref": "#/components/schemas/REQProject" },
          "recordId": { "example": "String", "type": "object" },
          "req": { "example": "String", "type": "object" },
          "reqDetails": { "example": "String", "type": "string" },
          "reqNumber": { "example": "String", "type": "object" },
          "reqNumberGenerate": { "example": 0, "type": "number" },
          "requestedBy": { "$ref": "#/components/schemas/REQRequestedBy" },
          "resourcing": { "type": "array" },
          "role": { "$ref": "#/components/schemas/REQRole" },
          "signupEdit": { "example": "String", "type": "object" },
          "signupInfo": { "$ref": "#/components/schemas/REQSignupInfo" },
          "sow": { "$ref": "#/components/schemas/REQSow" },
          "status": { "example": "String", "type": "string" },
          "timeToClose": { "example": 0, "type": "object" },
          "timeToFill": { "example": 0, "type": "object" },
          "type": { "$ref": "#/components/schemas/REQType" }
        },
        "type": "object"
      },
      "REQCalculatedProjectLink": {
        "properties": {
          "id": {
            "description": "Unique identifer for Calculated Project Link",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "requiresBackgroundCheck": { "example": [true], "type": "array" }
        },
        "type": "object"
      },
      "REQHiringManager": {
        "properties": {
          "id": {
            "description": "Unique identifer for Hiring Manager",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "REQLateStageCandidate": {
        "properties": {
          "compensationCurrency": { "example": "String", "type": "string" },
          "compensationRangeMin": { "example": 0, "type": "number" },
          "country": { "example": "String", "type": "string" },
          "email": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Late Stage Candidate",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "leverLink": { "example": "String", "type": "string" },
          "name": { "example": "String", "type": "string" },
          "noticePeriod": { "example": "String", "type": "string" },
          "opportunityId": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "REQProject": {
        "properties": {
          "id": {
            "description": "Unique identifer for Project",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "project": { "example": "String", "type": "string" },
          "requiredCountryFromClient": {
            "example": ["String"],
            "type": "array"
          },
          "restrictedCountryFromClient": {
            "example": ["String"],
            "type": "array"
          }
        },
        "type": "object"
      },
      "REQRequestedBy": {
        "properties": {
          "id": {
            "description": "Unique identifer for Requested by",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "REQRole": {
        "properties": {
          "billable": { "example": true, "type": "boolean" },
          "departmentName": { "example": "String", "type": "string" },
          "division": { "example": "String", "type": "string" },
          "hrTitleDeprecated": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "jobDescription": { "example": "String", "type": "string" },
          "pipeline": { "example": "String", "type": "string" },
          "pipelineName": { "example": "String", "type": "string" },
          "pipelineRecordID": { "example": "String", "type": "object" },
          "practiceArea": { "example": "String", "type": "string" },
          "recordID": { "example": "String", "type": "object" },
          "recruiterFromPipeline": { "example": "String", "type": "string" },
          "roleName": { "example": "String", "type": "string" },
          "statusFromPipeline": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "REQSignupInfo": {
        "properties": {
          "id": {
            "description": "Unique identifer for Signup Info",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "joinDate": {
            "example": ["2023-01-05T19:00:44.544Z"],
            "type": "array"
          },
          "recordID": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "REQSow": {
        "properties": {
          "client": { "example": "String", "type": "string" },
          "department": { "example": "String", "type": "string" },
          "entity": { "example": "String", "type": "string" },
          "entityNameFromDivisionsFromDepartment": {
            "example": "String",
            "type": "string"
          },
          "id": {
            "description": "Unique identifer for SOW",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "project": { "example": "String", "type": "string" },
          "recordId": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "REQType": {
        "properties": {
          "id": {
            "description": "Unique identifer for Type",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Role": {
        "properties": {
          "hrTitle": { "$ref": "#/components/schemas/RoleHrTitle" },
          "id": {
            "description": "Unique identifer for Role.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "roleLevel": { "example": "String", "type": "string" },
          "roleName": { "example": "String", "type": "string" },
          "topologyPermissionExcludes": { "type": "array" },
          "topologyPermissions": { "type": "array" }
        },
        "type": "object"
      },
      "RoleHrTitle": {
        "properties": {
          "id": {
            "description": "Unique identifer for HR Title",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SOW": {
        "properties": {
          "allocations": { "example": "String", "type": "string" },
          "assignments": { "type": "array" },
          "client": { "type": "array" },
          "closeDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "company": { "example": "String", "type": "string" },
          "companyBusinessUnit": { "example": "String", "type": "string" },
          "companyId": { "example": 0, "type": "number" },
          "countResourcing": { "example": 0, "type": "number" },
          "currentTeamMemberCount": { "example": 0, "type": "object" },
          "currentTeamMemberNames": { "type": "object" },
          "dealName": { "example": "String", "type": "string" },
          "dealProbability": { "example": 0, "type": "number" },
          "dealid": { "example": 0, "type": "number" },
          "department": { "$ref": "#/components/schemas/SOWDepartment" },
          "description": { "example": "String", "type": "string" },
          "email": { "example": "String", "type": "string" },
          "endDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "id": {
            "description": "Unique identifer for SOW.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "lastModified": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "openReqsCount": { "example": 0, "type": "number" },
          "parentDealId": { "example": "String", "type": "string" },
          "positions": { "example": "String", "type": "string" },
          "positions2": { "type": "array" },
          "positions3": { "example": "String", "type": "string" },
          "positionsCopy": { "example": "String", "type": "string" },
          "program": { "example": "String", "type": "string" },
          "project": { "type": "array" },
          "rateCards": { "type": "array" },
          "recordId": { "example": "String", "type": "object" },
          "reqs": { "type": "array" },
          "requiresBackgroundCheck": { "example": true, "type": "boolean" },
          "resourcing": { "type": "array" },
          "rootDealId": { "example": "String", "type": "string" },
          "servicesDivision": { "example": "String", "type": "string" },
          "servicesOwner": { "$ref": "#/components/schemas/SOWServicesOwner" },
          "sowNum": { "example": "String", "type": "string" },
          "stage": { "example": "String", "type": "string" },
          "startDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "status": { "example": "String", "type": "object" },
          "teamMemberCount": { "example": 0, "type": "number" },
          "teams": { "type": "array" }
        },
        "type": "object"
      },
      "SOWDepartment": {
        "properties": {
          "departments": { "example": "String", "type": "string" },
          "entity": { "example": "String", "type": "string" },
          "entityNameFromDivisions": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Department",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SOWServicesOwner": {
        "properties": {
          "id": {
            "description": "Unique identifer for servicesOwner",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "picture": { "example": "https://example.com", "type": "string" }
        },
        "type": "object"
      },
      "Signup": {
        "properties": {
          "additionalNotes": { "example": "String", "type": "string" },
          "addressLine2": { "example": "String", "type": "string" },
          "authorizedToWork": { "example": "String", "type": "string" },
          "calculatedMailingAddress": { "example": "String", "type": "object" },
          "candidateProvidedInformation": {
            "example": true,
            "type": "boolean"
          },
          "city": { "example": "String", "type": "string" },
          "companyName": { "example": "String", "type": "string" },
          "companyTaxID": { "example": "String", "type": "string" },
          "compensation": { "example": 0, "type": "number" },
          "compensationType": { "example": "String", "type": "string" },
          "completedPractical": {
            "$ref": "#/components/schemas/SignupCompletedPractical"
          },
          "computerElection": { "example": "String", "type": "string" },
          "computerShippingAddress": { "example": "String", "type": "string" },
          "computerShippingAddress2": { "example": "String", "type": "string" },
          "computerShippingAddressIsDifferent": {
            "example": "String",
            "type": "string"
          },
          "computerShippingCity": { "example": "String", "type": "string" },
          "computerShippingCountry": {
            "$ref": "#/components/schemas/SignupComputerShippingCountry"
          },
          "computerShippingCountryStateprovince": {
            "$ref": "#/components/schemas/SignupComputerShippingCountryStateprovince"
          },
          "computerShippingPostalCode": {
            "example": "String",
            "type": "string"
          },
          "computerSize": { "example": "String", "type": "string" },
          "computerType": { "example": "String", "type": "string" },
          "contractType": { "example": "String", "type": "string" },
          "contractWitnessEmail": {
            "example": "me@example.com",
            "type": "string"
          },
          "contractWitnessName": { "example": "String", "type": "string" },
          "country": { "$ref": "#/components/schemas/SignupCountry" },
          "currency": { "example": "String", "type": "string" },
          "dateApproved": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "directManager": {
            "$ref": "#/components/schemas/SignupDirectManager"
          },
          "email": { "example": "me@example.com", "type": "string" },
          "expiration": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "object"
          },
          "expirationOverride": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "group": { "$ref": "#/components/schemas/SignupGroup" },
          "id": {
            "description": "Unique identifer for Signup.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "legalFirstName": { "example": "String", "type": "string" },
          "legalLastName": { "example": "String", "type": "string" },
          "legalMiddleName": { "example": "String", "type": "string" },
          "leverReport": { "$ref": "#/components/schemas/SignupLeverReport" },
          "leverid": { "example": "String", "type": "string" },
          "mailingAddress": { "example": "String", "type": "string" },
          "mailingAddress2": { "example": "String", "type": "string" },
          "mailingAddressIsDifferent": {
            "example": "String",
            "type": "string"
          },
          "mailingCity": { "example": "String", "type": "string" },
          "mailingCountry": {
            "$ref": "#/components/schemas/SignupMailingCountry"
          },
          "mailingCountryStateprovince": {
            "$ref": "#/components/schemas/SignupMailingCountryStateprovince"
          },
          "mailingPostalCode": { "example": "String", "type": "string" },
          "peopleList": { "type": "array" },
          "phoneNumber": { "example": "String", "type": "string" },
          "postalCode": { "example": "String", "type": "string" },
          "practicalPaymentStatus": { "example": "String", "type": "string" },
          "preferredFirstName": { "example": "String", "type": "string" },
          "preferredLastName": { "example": "String", "type": "string" },
          "preferredName": { "example": "String", "type": "object" },
          "recruiter": { "$ref": "#/components/schemas/SignupRecruiter" },
          "relocationConsiderations": { "example": "String", "type": "string" },
          "reqs": { "type": "array" },
          "role": { "$ref": "#/components/schemas/SignupRole" },
          "signOnBonusConsiderations": {
            "example": "String",
            "type": "string"
          },
          "startDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "stateprovince": {
            "$ref": "#/components/schemas/SignupStateprovince"
          },
          "status": { "example": "String", "type": "string" },
          "streetAddress": { "example": "String", "type": "string" },
          "taxID": { "example": "String", "type": "string" },
          "teamMemberType": {
            "$ref": "#/components/schemas/SignupTeamMemberType"
          }
        },
        "type": "object"
      },
      "SignupCompletedPractical": {
        "properties": {
          "id": {
            "description": "Unique identifer for Completed Practical",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "SignupComputerShippingCountry": {
        "properties": {
          "id": {
            "description": "Unique identifer for Computer Shipping Country",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupComputerShippingCountryStateprovince": {
        "properties": {
          "id": {
            "description": "Unique identifer for Computer Shipping Country State/Province",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupCountry": {
        "properties": {
          "abbreviation": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Country",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "SignupDirectManager": {
        "properties": {
          "id": {
            "description": "Unique identifer for Direct Manager",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "picture": { "example": "https://example.com", "type": "string" }
        },
        "type": "object"
      },
      "SignupGroup": {
        "properties": {
          "groupName": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Group",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupLeverReport": {
        "properties": {
          "email": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Lever Report",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "leverLink": { "example": "String", "type": "string" },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "SignupMailingCountry": {
        "properties": {
          "id": {
            "description": "Unique identifer for Mailing Country",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupMailingCountryStateprovince": {
        "properties": {
          "id": {
            "description": "Unique identifer for Mailing Country State/Province",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupRecruiter": {
        "properties": {
          "id": {
            "description": "Unique identifer for Recruiter",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignupRole": {
        "properties": {
          "hrTitle": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "offerJobDescription": { "example": "String", "type": "string" },
          "roleName": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "SignupStateprovince": {
        "properties": {
          "id": {
            "description": "Unique identifer for State/Province",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "SignupTeamMemberType": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team Member Type",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "type": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "State": {
        "properties": {
          "country": { "type": "array" },
          "countryCode": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for State.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "Team": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "pipelines": { "type": "array" },
          "positions": { "type": "array" },
          "positionsCopy": { "example": "String", "type": "string" },
          "program": { "$ref": "#/components/schemas/TeamProgram" },
          "project": { "$ref": "#/components/schemas/TeamProject" },
          "recordId": { "example": "String", "type": "object" },
          "reference": { "example": "String", "type": "object" },
          "slackHandle": { "example": "String", "type": "string" },
          "slackHandleUID": { "example": "String", "type": "string" },
          "sows": { "type": "array" },
          "status": { "example": "String", "type": "string" },
          "teamLead": { "type": "array" }
        },
        "type": "object"
      },
      "TeamAssignment": {
        "properties": {
          "allocation": { "example": 0, "type": "number" },
          "id": {
            "description": "Unique identifer for Team Assignment.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "projectOverride": {
            "$ref": "#/components/schemas/TeamAssignmentProjectOverride"
          },
          "projectRole": {
            "$ref": "#/components/schemas/TeamAssignmentProjectRole"
          },
          "resourceEnd": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "resourceStart": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "slot": { "example": "String", "type": "object" },
          "sow": { "$ref": "#/components/schemas/TeamAssignmentSow" },
          "status": { "example": "String", "type": "object" },
          "teamMember": {
            "$ref": "#/components/schemas/TeamAssignmentTeamMember"
          }
        },
        "type": "object"
      },
      "TeamAssignmentProjectOverride": {
        "properties": {
          "id": {
            "description": "Unique identifer for Project Override",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamAssignmentProjectRole": {
        "properties": {
          "id": {
            "description": "Unique identifer for Project Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamAssignmentSow": {
        "properties": {
          "id": {
            "description": "Unique identifer for SOW",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamAssignmentTeamMember": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team Member",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMember": {
        "properties": {
          "activeBillingAllocations": { "example": 0, "type": "number" },
          "activeProjectCount": { "example": 0, "type": "number" },
          "activeTeamMemberUtilization": { "example": 0, "type": "number" },
          "applyDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "billable": { "example": true, "type": "boolean" },
          "country": { "$ref": "#/components/schemas/TeamMemberCountry" },
          "currentManager": {
            "$ref": "#/components/schemas/TeamMemberCurrentManager"
          },
          "currentRole": {
            "$ref": "#/components/schemas/TeamMemberCurrentRole"
          },
          "email": { "example": "me@example.com", "type": "string" },
          "entity": { "$ref": "#/components/schemas/TeamMemberEntity" },
          "entityWorksWith": {
            "$ref": "#/components/schemas/TeamMemberEntityWorksWith"
          },
          "exitDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "gender": { "example": "String", "type": "string" },
          "githubUsername": { "example": "String", "type": "string" },
          "hiringManager": {
            "$ref": "#/components/schemas/TeamMemberHiringManager"
          },
          "hiringRecruiter": {
            "$ref": "#/components/schemas/TeamMemberHiringRecruiter"
          },
          "hiringSource": { "example": "String", "type": "string" },
          "hiringSourceMech": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Team Member.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "joinDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "legalName": { "example": "String", "type": "string" },
          "leverOpportunityID": { "example": "String", "type": "string" },
          "leverReport": { "type": "array" },
          "name": { "example": "String", "type": "string" },
          "namelyProfileID": { "example": "String", "type": "string" },
          "offerDate": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "picture": { "example": "https://example.com", "type": "string" },
          "pipelines": { "type": "array" },
          "practiceArea": {
            "$ref": "#/components/schemas/TeamMemberPracticeArea"
          },
          "projectCount": { "example": 0, "type": "number" },
          "projectNames": { "type": "array" },
          "rejectedOffer": { "example": true, "type": "boolean" },
          "slackHandle": { "example": "String", "type": "string" },
          "slackUID": { "example": "String", "type": "string" },
          "sows": { "type": "array" },
          "startingProject": {
            "$ref": "#/components/schemas/TeamMemberStartingProject"
          },
          "startingRole": {
            "$ref": "#/components/schemas/TeamMemberStartingRole"
          },
          "state": { "$ref": "#/components/schemas/TeamMemberState" },
          "status": { "example": "String", "type": "object" },
          "teamMemberType": {
            "$ref": "#/components/schemas/TeamMemberTeamMemberType"
          },
          "timezoneLabel": { "example": "String", "type": "string" },
          "timezoneOffset": { "example": 0, "type": "number" }
        },
        "type": "object"
      },
      "TeamMemberCountry": {
        "properties": {
          "continentName": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Country",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "TeamMemberCurrentManager": {
        "properties": {
          "id": {
            "description": "Unique identifer for Current Manager",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberCurrentRole": {
        "properties": {
          "hrTitleName": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Current Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "roleName": { "example": "String", "type": "string" },
          "topologyPermissionCodes": { "example": ["String"], "type": "array" },
          "topologyPermissionExcludeCodes": {
            "example": ["String"],
            "type": "array"
          }
        },
        "type": "object"
      },
      "TeamMemberEntity": {
        "properties": {
          "id": {
            "description": "Unique identifer for Entity",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberEntityWorksWith": {
        "properties": {
          "id": {
            "description": "Unique identifer for Entity Works With",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberHiringManager": {
        "properties": {
          "id": {
            "description": "Unique identifer for Hiring Manager",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberHiringRecruiter": {
        "properties": {
          "id": {
            "description": "Unique identifer for Hiring Recruiter",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberPracticeArea": {
        "properties": {
          "id": {
            "description": "Unique identifer for Practice Area",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "practiceArea": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "TeamMemberStartingProject": {
        "properties": {
          "id": {
            "description": "Unique identifer for Starting Project",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberStartingRole": {
        "properties": {
          "id": {
            "description": "Unique identifer for Starting Role",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberState": {
        "properties": {
          "id": {
            "description": "Unique identifer for State/province",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "TeamMemberTeamMemberType": {
        "properties": {
          "id": {
            "description": "Unique identifer for Team Member Type",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberType": {
        "properties": {
          "averageBurden": { "example": 0, "type": "number" },
          "benefitMedicalDetails": { "type": "array" },
          "benefitsEmailTemplate": {
            "$ref": "#/components/schemas/TeamMemberTypeBenefitsEmailTemplate"
          },
          "benefitsOverview": {
            "example": "https://example.com",
            "type": "string"
          },
          "countOfCountries": { "example": 0, "type": "number" },
          "countriesWithTeamMembers": { "type": "array" },
          "employeecontractor": { "type": "array" },
          "entity": { "$ref": "#/components/schemas/TeamMemberTypeEntity" },
          "id": {
            "description": "Unique identifer for Team Member Type.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "lastModified": {
            "example": "2023-01-05T19:00:44.544Z",
            "type": "string"
          },
          "leverReport": { "type": "array" },
          "manual": { "type": "array" },
          "namelyEmployeeType": { "example": "String", "type": "string" },
          "newTeamMemberData": { "type": "array" },
          "numberOfCurrentTeamMembers": { "example": 0, "type": "number" },
          "numberOfCurrentTeamMembersJoined2021": {
            "example": 0,
            "type": "number"
          },
          "officevibeTeams": { "type": "array" },
          "paymentCurrency": { "example": "String", "type": "string" },
          "paymentType": { "example": "String", "type": "string" },
          "peo": { "$ref": "#/components/schemas/TeamMemberTypePeo" },
          "probationaryPeriodLength": { "example": 0, "type": "number" },
          "probationaryPeriodMessageTemplates": { "type": "array" },
          "supportedCountry": { "type": "array" },
          "theoremTeam": { "type": "array" },
          "type": { "example": "String", "type": "string" }
        },
        "type": "object"
      },
      "TeamMemberTypeBenefitsEmailTemplate": {
        "properties": {
          "id": {
            "description": "Unique identifer for Benefits Email Template",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberTypeEntity": {
        "properties": {
          "id": {
            "description": "Unique identifer for Entity",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberTypePeo": {
        "properties": {
          "id": {
            "description": "Unique identifer for PEO",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamProgram": {
        "properties": {
          "id": {
            "description": "Unique identifer for Program",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamProject": {
        "properties": {
          "id": {
            "description": "Unique identifer for Project",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "recordId": { "example": "String", "type": "object" }
        },
        "type": "object"
      },
      "TopologyPermission": {
        "properties": {
          "category": { "example": "String", "type": "string" },
          "code": { "example": "String", "type": "string" },
          "description": { "example": "String", "type": "string" },
          "id": {
            "description": "Unique identifer for Topology Permission.",
            "example": "recO0FYb1Tccm9MZ2",
            "type": "string"
          },
          "name": { "example": "String", "type": "string" },
          "parentPermissionCode": { "example": "String", "type": "string" },
          "roles": { "type": "array" }
        },
        "type": "object"
      },
      "Unauthorized": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": { "$ref": "#/components/schemas/GenericError" },
            "type": "array"
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "default": "UNAUTHORIZED",
            "description": "The error name",
            "example": "UNAUTHORIZED",
            "minLength": 1,
            "type": "string"
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string"
          },
          "status": {
            "default": 401,
            "description": "The status code of the exception",
            "example": 401,
            "type": "number"
          }
        },
        "required": ["name", "message", "status"],
        "type": "object"
      },
      "UnprocessableEntity": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": { "$ref": "#/components/schemas/GenericError" },
            "type": "array"
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "default": "UNPROCESSABLE_ENTITY",
            "description": "The error name",
            "example": "UNPROCESSABLE_ENTITY",
            "minLength": 1,
            "type": "string"
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string"
          },
          "status": {
            "default": 422,
            "description": "The status code of the exception",
            "example": 422,
            "type": "number"
          }
        },
        "required": ["name", "message", "status"],
        "type": "object"
      },
      "UserHasAPIKeyResponseModel": {
        "properties": { "apiKeyExists": { "type": "boolean" } },
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "Topology API is the centralized API server of all Theoremone Talent Acquisition Team services.",
    "title": "Topology API",
    "version": "1.0.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/assignments": {
      "get": {
        "description": "Finds all assignments. Returns assignments matching query paramenters.",
        "operationId": "assignmentsFindAllAssignments",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllAssignmentsReponse"
                }
              }
            },
            "description": "The existing assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all assignments",
        "tags": ["Assignments"]
      },
      "patch": {
        "description": "Patches an existing assignment. Returns the patched assignment.",
        "operationId": "assignmentsPatchAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assignment" }
              }
            },
            "description": "The patched assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing assignment",
        "tags": ["Assignments"]
      },
      "post": {
        "description": "Creates new assignment. Returns the created assignment.",
        "operationId": "assignmentsCreateNewAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assignment" }
              }
            },
            "description": "The created assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new assignment",
        "tags": ["Assignments"]
      },
      "put": {
        "description": "Updates an existing assignment. Returns the updated assignment. Null values will wipe database fields.",
        "operationId": "assignmentsUpdateAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assignment" }
              }
            },
            "description": "The updated assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing assignment",
        "tags": ["Assignments"]
      }
    },
    "/v1/assignments/batch": {
      "delete": {
        "description": "Deletes existing assignments. Returns ids of the deleted assignments.",
        "operationId": "assignmentsDeleteAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the assignments to be deleted.\nNote: this list should contain at least one assignment.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted assignments response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing assignments",
        "tags": ["Assignments"]
      },
      "patch": {
        "description": "Patches existing assignments. Returns the patched assignments.",
        "operationId": "assignmentsPatchAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing assignments",
        "tags": ["Assignments"]
      },
      "post": {
        "description": "Creates new assignments. Returns the created assignments.",
        "operationId": "assignmentsCreateNewAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new assignments",
        "tags": ["Assignments"]
      },
      "put": {
        "description": "Updates existing assignments. Returns the updated assignments. Null values will wipe database table fields.",
        "operationId": "assignmentsUpdateAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing assignments",
        "tags": ["Assignments"]
      }
    },
    "/v1/assignments/first-page": {
      "get": {
        "description": "Finds the first page of assignments. Returns assignments first page matching query paramenters.",
        "operationId": "assignmentsFindAssignmentsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllAssignmentsReponse"
                }
              }
            },
            "description": "The existing assignments on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page assignments",
        "tags": ["Assignments"]
      }
    },
    "/v1/assignments/{assignmentId}": {
      "delete": {
        "description": "Deletes an existing assignment by id. Returns id of the deleted assignment.",
        "operationId": "assignmentsDeleteAssignment",
        "parameters": [
          {
            "description": "The id of the assignment to be deleted.",
            "in": "path",
            "name": "assignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted assignment response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing assignment by id",
        "tags": ["Assignments"]
      },
      "get": {
        "description": "Finds assignment by id. Returns assignment matching the given id.",
        "operationId": "assignmentsFindAssignmentById",
        "parameters": [
          {
            "description": "The id of the assignment to be found.",
            "in": "path",
            "name": "assignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assignment" }
              }
            },
            "description": "The existing assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find assignment by id",
        "tags": ["Assignments"]
      }
    },
    "/v1/auth": {
      "get": {
        "description": "Finds the authenticated user details. Throws 404 if the user is not found.",
        "operationId": "authFindAuthenticatedUserDetails",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            },
            "description": "The authenticated user user details."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "User not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find authenticated user details",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/api-keys": {
      "delete": {
        "description": "Deletes authenticated user api key. It returns true if the api key was found and deleted successfully.",
        "operationId": "authDeleteApiKeyIfExists",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserAPIKeyResponseModel"
                }
              }
            },
            "description": "Result of whether the user API key existed and has been deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete authenticated user api key",
        "tags": ["Auth"]
      },
      "post": {
        "description": "Creates new api key for the authenticated user if no key exists. throws 400 Bad Request if the api key already exists.",
        "operationId": "authCreateApiKeyIfNotExists",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyResponseModel" }
              }
            },
            "description": "The authenticated user api key."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequest" }
              }
            },
            "description": "API Key already exists"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new API key",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/api-keys/refresh": {
      "put": {
        "description": "Refreshes authenticated user api key. Creates a new api key if none exists.",
        "operationId": "authRefreshApiKey",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyResponseModel" }
              }
            },
            "description": "The authenticated user api key."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Refresh authenticated user API key",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/api-keys/user-has-api-key": {
      "get": {
        "description": "Checks if authenticated user has an api key. It returns true if the user generated an api key.",
        "operationId": "authUserHasApiKey",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserHasAPIKeyResponseModel"
                }
              }
            },
            "description": "Result of whether the user API key exists or not."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Check if authenticated user has API key",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/google/login": {
      "get": {
        "operationId": "authFindGoogleAuthLoginUrl",
        "parameters": [],
        "responses": {
          "301": {
            "content": { "*/*": { "schema": { "type": "string" } } },
            "description": "Moved Permanently"
          }
        },
        "summary": "Redirect user to google login page",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/oauth-login/apply": {
      "post": {
        "description": "Returns the authenticated user token.",
        "operationId": "authLogin",
        "parameters": [
          {
            "description": "The third party oauth client code",
            "in": "header",
            "name": "x-oauth-code",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedUserTokenModel"
                }
              }
            },
            "description": "The authenticated user token."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "Find authenticated user token",
        "tags": ["Auth"]
      }
    },
    "/v1/candidates": {
      "get": {
        "description": "Finds all candidates. Returns candidates matching query paramenters.",
        "operationId": "candidatesFindAllCandidates",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllCandidatesReponse"
                }
              }
            },
            "description": "The existing candidates"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all candidates",
        "tags": ["Candidates"]
      },
      "patch": {
        "description": "Patches an existing candidate. Returns the patched candidate.",
        "operationId": "candidatesPatchCandidate",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Candidate" }
              }
            },
            "description": "The patched candidate"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing candidate",
        "tags": ["Candidates"]
      },
      "post": {
        "description": "Creates new candidate. Returns the created candidate.",
        "operationId": "candidatesCreateNewCandidate",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Candidate" }
              }
            },
            "description": "The created candidate"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new candidate",
        "tags": ["Candidates"]
      },
      "put": {
        "description": "Updates an existing candidate. Returns the updated candidate. Null values will wipe database fields.",
        "operationId": "candidatesUpdateCandidate",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Candidate" }
              }
            },
            "description": "The updated candidate"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing candidate",
        "tags": ["Candidates"]
      }
    },
    "/v1/candidates/batch": {
      "delete": {
        "description": "Deletes existing candidates. Returns ids of the deleted candidates.",
        "operationId": "candidatesDeleteCandidates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the candidates to be deleted.\nNote: this list should contain at least one candidate.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted candidates response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing candidates",
        "tags": ["Candidates"]
      },
      "patch": {
        "description": "Patches existing candidates. Returns the patched candidates.",
        "operationId": "candidatesPatchCandidates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched candidates"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing candidates",
        "tags": ["Candidates"]
      },
      "post": {
        "description": "Creates new candidates. Returns the created candidates.",
        "operationId": "candidatesCreateNewCandidates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created candidates"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new candidates",
        "tags": ["Candidates"]
      },
      "put": {
        "description": "Updates existing candidates. Returns the updated candidates. Null values will wipe database table fields.",
        "operationId": "candidatesUpdateCandidates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated candidates"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing candidates",
        "tags": ["Candidates"]
      }
    },
    "/v1/candidates/first-page": {
      "get": {
        "description": "Finds the first page of candidates. Returns candidates first page matching query paramenters.",
        "operationId": "candidatesFindCandidatesFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllCandidatesReponse"
                }
              }
            },
            "description": "The existing candidates on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page candidates",
        "tags": ["Candidates"]
      }
    },
    "/v1/candidates/{candidateId}": {
      "delete": {
        "description": "Deletes an existing candidate by id. Returns id of the deleted candidate.",
        "operationId": "candidatesDeleteCandidate",
        "parameters": [
          {
            "description": "The id of the candidate to be deleted.",
            "in": "path",
            "name": "candidateId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted candidate response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing candidate by id",
        "tags": ["Candidates"]
      },
      "get": {
        "description": "Finds candidate by id. Returns candidate matching the given id.",
        "operationId": "candidatesFindCandidateById",
        "parameters": [
          {
            "description": "The id of the candidate to be found.",
            "in": "path",
            "name": "candidateId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Candidate" }
              }
            },
            "description": "The existing candidate"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find candidate by id",
        "tags": ["Candidates"]
      }
    },
    "/v1/clients": {
      "get": {
        "description": "Finds all clients. Returns clients matching query paramenters.",
        "operationId": "clientsFindAllClients",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllClientsReponse"
                }
              }
            },
            "description": "The existing clients"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all clients",
        "tags": ["Clients"]
      },
      "patch": {
        "description": "Patches an existing client. Returns the patched client.",
        "operationId": "clientsPatchClient",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            },
            "description": "The patched client"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing client",
        "tags": ["Clients"]
      },
      "post": {
        "description": "Creates new client. Returns the created client.",
        "operationId": "clientsCreateNewClient",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            },
            "description": "The created client"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new client",
        "tags": ["Clients"]
      },
      "put": {
        "description": "Updates an existing client. Returns the updated client. Null values will wipe database fields.",
        "operationId": "clientsUpdateClient",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            },
            "description": "The updated client"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing client",
        "tags": ["Clients"]
      }
    },
    "/v1/clients/batch": {
      "delete": {
        "description": "Deletes existing clients. Returns ids of the deleted clients.",
        "operationId": "clientsDeleteClients",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the clients to be deleted.\nNote: this list should contain at least one client.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted clients response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing clients",
        "tags": ["Clients"]
      },
      "patch": {
        "description": "Patches existing clients. Returns the patched clients.",
        "operationId": "clientsPatchClients",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched clients"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing clients",
        "tags": ["Clients"]
      },
      "post": {
        "description": "Creates new clients. Returns the created clients.",
        "operationId": "clientsCreateNewClients",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created clients"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new clients",
        "tags": ["Clients"]
      },
      "put": {
        "description": "Updates existing clients. Returns the updated clients. Null values will wipe database table fields.",
        "operationId": "clientsUpdateClients",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated clients"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing clients",
        "tags": ["Clients"]
      }
    },
    "/v1/clients/first-page": {
      "get": {
        "description": "Finds the first page of clients. Returns clients first page matching query paramenters.",
        "operationId": "clientsFindClientsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllClientsReponse"
                }
              }
            },
            "description": "The existing clients on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page clients",
        "tags": ["Clients"]
      }
    },
    "/v1/clients/{clientId}": {
      "delete": {
        "description": "Deletes an existing client by id. Returns id of the deleted client.",
        "operationId": "clientsDeleteClient",
        "parameters": [
          {
            "description": "The id of the client to be deleted.",
            "in": "path",
            "name": "clientId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted client response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing client by id",
        "tags": ["Clients"]
      },
      "get": {
        "description": "Finds client by id. Returns client matching the given id.",
        "operationId": "clientsFindClientById",
        "parameters": [
          {
            "description": "The id of the client to be found.",
            "in": "path",
            "name": "clientId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            },
            "description": "The existing client"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find client by id",
        "tags": ["Clients"]
      }
    },
    "/v1/countries": {
      "get": {
        "description": "Finds all countries. Returns countries matching query paramenters.",
        "operationId": "countriesFindAllCountries",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllCountriesReponse"
                }
              }
            },
            "description": "The existing countries"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all countries",
        "tags": ["Countries"]
      },
      "patch": {
        "description": "Patches an existing country. Returns the patched country.",
        "operationId": "countriesPatchCountry",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Country" }
              }
            },
            "description": "The patched country"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing country",
        "tags": ["Countries"]
      },
      "post": {
        "description": "Creates new country. Returns the created country.",
        "operationId": "countriesCreateNewCountry",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Country" }
              }
            },
            "description": "The created country"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new country",
        "tags": ["Countries"]
      },
      "put": {
        "description": "Updates an existing country. Returns the updated country. Null values will wipe database fields.",
        "operationId": "countriesUpdateCountry",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Country" }
              }
            },
            "description": "The updated country"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing country",
        "tags": ["Countries"]
      }
    },
    "/v1/countries/batch": {
      "delete": {
        "description": "Deletes existing countries. Returns ids of the deleted countries.",
        "operationId": "countriesDeleteCountries",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the countries to be deleted.\nNote: this list should contain at least one country.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted countries response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing countries",
        "tags": ["Countries"]
      },
      "patch": {
        "description": "Patches existing countries. Returns the patched countries.",
        "operationId": "countriesPatchCountries",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched countries"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing countries",
        "tags": ["Countries"]
      },
      "post": {
        "description": "Creates new countries. Returns the created countries.",
        "operationId": "countriesCreateNewCountries",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created countries"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new countries",
        "tags": ["Countries"]
      },
      "put": {
        "description": "Updates existing countries. Returns the updated countries. Null values will wipe database table fields.",
        "operationId": "countriesUpdateCountries",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated countries"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing countries",
        "tags": ["Countries"]
      }
    },
    "/v1/countries/first-page": {
      "get": {
        "description": "Finds the first page of countries. Returns countries first page matching query paramenters.",
        "operationId": "countriesFindCountriesFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllCountriesReponse"
                }
              }
            },
            "description": "The existing countries on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page countries",
        "tags": ["Countries"]
      }
    },
    "/v1/countries/{countryId}": {
      "delete": {
        "description": "Deletes an existing country by id. Returns id of the deleted country.",
        "operationId": "countriesDeleteCountry",
        "parameters": [
          {
            "description": "The id of the country to be deleted.",
            "in": "path",
            "name": "countryId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted country response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing country by id",
        "tags": ["Countries"]
      },
      "get": {
        "description": "Finds country by id. Returns country matching the given id.",
        "operationId": "countriesFindCountryById",
        "parameters": [
          {
            "description": "The id of the country to be found.",
            "in": "path",
            "name": "countryId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Country" }
              }
            },
            "description": "The existing country"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find country by id",
        "tags": ["Countries"]
      }
    },
    "/v1/departments": {
      "get": {
        "description": "Finds all departments. Returns departments matching query paramenters.",
        "operationId": "departmentsFindAllDepartments",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllDepartmentsReponse"
                }
              }
            },
            "description": "The existing departments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all departments",
        "tags": ["Departments"]
      },
      "patch": {
        "description": "Patches an existing department. Returns the patched department.",
        "operationId": "departmentsPatchDepartment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            },
            "description": "The patched department"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing department",
        "tags": ["Departments"]
      },
      "post": {
        "description": "Creates new department. Returns the created department.",
        "operationId": "departmentsCreateNewDepartment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            },
            "description": "The created department"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new department",
        "tags": ["Departments"]
      },
      "put": {
        "description": "Updates an existing department. Returns the updated department. Null values will wipe database fields.",
        "operationId": "departmentsUpdateDepartment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            },
            "description": "The updated department"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing department",
        "tags": ["Departments"]
      }
    },
    "/v1/departments/batch": {
      "delete": {
        "description": "Deletes existing departments. Returns ids of the deleted departments.",
        "operationId": "departmentsDeleteDepartments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the departments to be deleted.\nNote: this list should contain at least one department.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted departments response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing departments",
        "tags": ["Departments"]
      },
      "patch": {
        "description": "Patches existing departments. Returns the patched departments.",
        "operationId": "departmentsPatchDepartments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched departments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing departments",
        "tags": ["Departments"]
      },
      "post": {
        "description": "Creates new departments. Returns the created departments.",
        "operationId": "departmentsCreateNewDepartments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created departments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new departments",
        "tags": ["Departments"]
      },
      "put": {
        "description": "Updates existing departments. Returns the updated departments. Null values will wipe database table fields.",
        "operationId": "departmentsUpdateDepartments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated departments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing departments",
        "tags": ["Departments"]
      }
    },
    "/v1/departments/first-page": {
      "get": {
        "description": "Finds the first page of departments. Returns departments first page matching query paramenters.",
        "operationId": "departmentsFindDepartmentsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllDepartmentsReponse"
                }
              }
            },
            "description": "The existing departments on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page departments",
        "tags": ["Departments"]
      }
    },
    "/v1/departments/{departmentId}": {
      "delete": {
        "description": "Deletes an existing department by id. Returns id of the deleted department.",
        "operationId": "departmentsDeleteDepartment",
        "parameters": [
          {
            "description": "The id of the department to be deleted.",
            "in": "path",
            "name": "departmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted department response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing department by id",
        "tags": ["Departments"]
      },
      "get": {
        "description": "Finds department by id. Returns department matching the given id.",
        "operationId": "departmentsFindDepartmentById",
        "parameters": [
          {
            "description": "The id of the department to be found.",
            "in": "path",
            "name": "departmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            },
            "description": "The existing department"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find department by id",
        "tags": ["Departments"]
      }
    },
    "/v1/feedbacks": {
      "get": {
        "description": "Finds all feedbacks. Returns feedbacks matching query paramenters.",
        "operationId": "feedbacksFindAllFeedbacks",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllFeedbacksReponse"
                }
              }
            },
            "description": "The existing feedbacks"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all feedbacks",
        "tags": ["Feedbacks"]
      },
      "patch": {
        "description": "Patches an existing feedback. Returns the patched feedback.",
        "operationId": "feedbacksPatchFeedback",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            },
            "description": "The patched feedback"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing feedback",
        "tags": ["Feedbacks"]
      },
      "post": {
        "description": "Creates new feedback. Returns the created feedback.",
        "operationId": "feedbacksCreateNewFeedback",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            },
            "description": "The created feedback"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new feedback",
        "tags": ["Feedbacks"]
      },
      "put": {
        "description": "Updates an existing feedback. Returns the updated feedback. Null values will wipe database fields.",
        "operationId": "feedbacksUpdateFeedback",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            },
            "description": "The updated feedback"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing feedback",
        "tags": ["Feedbacks"]
      }
    },
    "/v1/feedbacks/batch": {
      "delete": {
        "description": "Deletes existing feedbacks. Returns ids of the deleted feedbacks.",
        "operationId": "feedbacksDeleteFeedbacks",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the feedbacks to be deleted.\nNote: this list should contain at least one feedback.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted feedbacks response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing feedbacks",
        "tags": ["Feedbacks"]
      },
      "patch": {
        "description": "Patches existing feedbacks. Returns the patched feedbacks.",
        "operationId": "feedbacksPatchFeedbacks",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched feedbacks"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing feedbacks",
        "tags": ["Feedbacks"]
      },
      "post": {
        "description": "Creates new feedbacks. Returns the created feedbacks.",
        "operationId": "feedbacksCreateNewFeedbacks",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created feedbacks"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new feedbacks",
        "tags": ["Feedbacks"]
      },
      "put": {
        "description": "Updates existing feedbacks. Returns the updated feedbacks. Null values will wipe database table fields.",
        "operationId": "feedbacksUpdateFeedbacks",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated feedbacks"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing feedbacks",
        "tags": ["Feedbacks"]
      }
    },
    "/v1/feedbacks/first-page": {
      "get": {
        "description": "Finds the first page of feedbacks. Returns feedbacks first page matching query paramenters.",
        "operationId": "feedbacksFindFeedbacksFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllFeedbacksReponse"
                }
              }
            },
            "description": "The existing feedbacks on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page feedbacks",
        "tags": ["Feedbacks"]
      }
    },
    "/v1/feedbacks/{feedbackId}": {
      "delete": {
        "description": "Deletes an existing feedback by id. Returns id of the deleted feedback.",
        "operationId": "feedbacksDeleteFeedback",
        "parameters": [
          {
            "description": "The id of the feedback to be deleted.",
            "in": "path",
            "name": "feedbackId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted feedback response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing feedback by id",
        "tags": ["Feedbacks"]
      },
      "get": {
        "description": "Finds feedback by id. Returns feedback matching the given id.",
        "operationId": "feedbacksFindFeedbackById",
        "parameters": [
          {
            "description": "The id of the feedback to be found.",
            "in": "path",
            "name": "feedbackId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            },
            "description": "The existing feedback"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find feedback by id",
        "tags": ["Feedbacks"]
      }
    },
    "/v1/healthcheck": {
      "get": {
        "description": "Check if the application server is running.",
        "operationId": "healthCheckHealthcheck",
        "parameters": [],
        "responses": {
          "200": {
            "content": { "*/*": { "schema": { "type": "string" } } },
            "description": "Any response to indicate that application server is running"
          }
        },
        "summary": "Check server health",
        "tags": ["HealthCheck"]
      }
    },
    "/v1/interviews": {
      "get": {
        "description": "Finds all interviews. Returns interviews matching query paramenters.",
        "operationId": "interviewsFindAllInterviews",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllInterviewsReponse"
                }
              }
            },
            "description": "The existing interviews"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all interviews",
        "tags": ["Interviews"]
      },
      "patch": {
        "description": "Patches an existing interview. Returns the patched interview.",
        "operationId": "interviewsPatchInterview",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Interview" }
              }
            },
            "description": "The patched interview"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing interview",
        "tags": ["Interviews"]
      },
      "post": {
        "description": "Creates new interview. Returns the created interview.",
        "operationId": "interviewsCreateNewInterview",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Interview" }
              }
            },
            "description": "The created interview"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new interview",
        "tags": ["Interviews"]
      },
      "put": {
        "description": "Updates an existing interview. Returns the updated interview. Null values will wipe database fields.",
        "operationId": "interviewsUpdateInterview",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Interview" }
              }
            },
            "description": "The updated interview"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing interview",
        "tags": ["Interviews"]
      }
    },
    "/v1/interviews/batch": {
      "delete": {
        "description": "Deletes existing interviews. Returns ids of the deleted interviews.",
        "operationId": "interviewsDeleteInterviews",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the interviews to be deleted.\nNote: this list should contain at least one interview.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted interviews response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing interviews",
        "tags": ["Interviews"]
      },
      "patch": {
        "description": "Patches existing interviews. Returns the patched interviews.",
        "operationId": "interviewsPatchInterviews",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched interviews"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing interviews",
        "tags": ["Interviews"]
      },
      "post": {
        "description": "Creates new interviews. Returns the created interviews.",
        "operationId": "interviewsCreateNewInterviews",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created interviews"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new interviews",
        "tags": ["Interviews"]
      },
      "put": {
        "description": "Updates existing interviews. Returns the updated interviews. Null values will wipe database table fields.",
        "operationId": "interviewsUpdateInterviews",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated interviews"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing interviews",
        "tags": ["Interviews"]
      }
    },
    "/v1/interviews/first-page": {
      "get": {
        "description": "Finds the first page of interviews. Returns interviews first page matching query paramenters.",
        "operationId": "interviewsFindInterviewsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllInterviewsReponse"
                }
              }
            },
            "description": "The existing interviews on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page interviews",
        "tags": ["Interviews"]
      }
    },
    "/v1/interviews/{interviewId}": {
      "delete": {
        "description": "Deletes an existing interview by id. Returns id of the deleted interview.",
        "operationId": "interviewsDeleteInterview",
        "parameters": [
          {
            "description": "The id of the interview to be deleted.",
            "in": "path",
            "name": "interviewId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted interview response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing interview by id",
        "tags": ["Interviews"]
      },
      "get": {
        "description": "Finds interview by id. Returns interview matching the given id.",
        "operationId": "interviewsFindInterviewById",
        "parameters": [
          {
            "description": "The id of the interview to be found.",
            "in": "path",
            "name": "interviewId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Interview" }
              }
            },
            "description": "The existing interview"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find interview by id",
        "tags": ["Interviews"]
      }
    },
    "/v1/positions": {
      "get": {
        "description": "Finds all positions. Returns positions matching query paramenters.",
        "operationId": "positionsFindAllPositions",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPositionsReponse"
                }
              }
            },
            "description": "The existing positions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all positions",
        "tags": ["Positions"]
      },
      "patch": {
        "description": "Patches an existing position. Returns the patched position.",
        "operationId": "positionsPatchPosition",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Position" }
              }
            },
            "description": "The patched position"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing position",
        "tags": ["Positions"]
      },
      "post": {
        "description": "Creates new position. Returns the created position.",
        "operationId": "positionsCreateNewPosition",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Position" }
              }
            },
            "description": "The created position"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new position",
        "tags": ["Positions"]
      },
      "put": {
        "description": "Updates an existing position. Returns the updated position. Null values will wipe database fields.",
        "operationId": "positionsUpdatePosition",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Position" }
              }
            },
            "description": "The updated position"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing position",
        "tags": ["Positions"]
      }
    },
    "/v1/positions/batch": {
      "delete": {
        "description": "Deletes existing positions. Returns ids of the deleted positions.",
        "operationId": "positionsDeletePositions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the positions to be deleted.\nNote: this list should contain at least one position.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted positions response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing positions",
        "tags": ["Positions"]
      },
      "patch": {
        "description": "Patches existing positions. Returns the patched positions.",
        "operationId": "positionsPatchPositions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched positions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing positions",
        "tags": ["Positions"]
      },
      "post": {
        "description": "Creates new positions. Returns the created positions.",
        "operationId": "positionsCreateNewPositions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created positions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new positions",
        "tags": ["Positions"]
      },
      "put": {
        "description": "Updates existing positions. Returns the updated positions. Null values will wipe database table fields.",
        "operationId": "positionsUpdatePositions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated positions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing positions",
        "tags": ["Positions"]
      }
    },
    "/v1/positions/first-page": {
      "get": {
        "description": "Finds the first page of positions. Returns positions first page matching query paramenters.",
        "operationId": "positionsFindPositionsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPositionsReponse"
                }
              }
            },
            "description": "The existing positions on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page positions",
        "tags": ["Positions"]
      }
    },
    "/v1/positions/{positionId}": {
      "delete": {
        "description": "Deletes an existing position by id. Returns id of the deleted position.",
        "operationId": "positionsDeletePosition",
        "parameters": [
          {
            "description": "The id of the position to be deleted.",
            "in": "path",
            "name": "positionId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted position response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing position by id",
        "tags": ["Positions"]
      },
      "get": {
        "description": "Finds position by id. Returns position matching the given id.",
        "operationId": "positionsFindPositionById",
        "parameters": [
          {
            "description": "The id of the position to be found.",
            "in": "path",
            "name": "positionId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Position" }
              }
            },
            "description": "The existing position"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find position by id",
        "tags": ["Positions"]
      }
    },
    "/v1/practical-assignments": {
      "get": {
        "description": "Finds all practical assignments. Returns practical assignments matching query paramenters.",
        "operationId": "practicalAssignmentsFindAllPracticalAssignments",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPracticalAssignmentsReponse"
                }
              }
            },
            "description": "The existing practical assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all practical assignments",
        "tags": ["Practical Assignments"]
      },
      "patch": {
        "description": "Patches an existing practical assignment. Returns the patched practical assignment.",
        "operationId": "practicalAssignmentsPatchPracticalAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PracticalAssignment" }
              }
            },
            "description": "The patched practical assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing practical assignment",
        "tags": ["Practical Assignments"]
      },
      "post": {
        "description": "Creates new practical assignment. Returns the created practical assignment.",
        "operationId": "practicalAssignmentsCreateNewPracticalAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PracticalAssignment" }
              }
            },
            "description": "The created practical assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new practical assignment",
        "tags": ["Practical Assignments"]
      },
      "put": {
        "description": "Updates an existing practical assignment. Returns the updated practical assignment. Null values will wipe database fields.",
        "operationId": "practicalAssignmentsUpdatePracticalAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PracticalAssignment" }
              }
            },
            "description": "The updated practical assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing practical assignment",
        "tags": ["Practical Assignments"]
      }
    },
    "/v1/practical-assignments/batch": {
      "delete": {
        "description": "Deletes existing practical assignments. Returns ids of the deleted practical assignments.",
        "operationId": "practicalAssignmentsDeletePracticalAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the practical assignments to be deleted.\nNote: this list should contain at least one practical assignment.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted practical assignments response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing practical assignments",
        "tags": ["Practical Assignments"]
      },
      "patch": {
        "description": "Patches existing practical assignments. Returns the patched practical assignments.",
        "operationId": "practicalAssignmentsPatchPracticalAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched practical assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing practical assignments",
        "tags": ["Practical Assignments"]
      },
      "post": {
        "description": "Creates new practical assignments. Returns the created practical assignments.",
        "operationId": "practicalAssignmentsCreateNewPracticalAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created practical assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new practical assignments",
        "tags": ["Practical Assignments"]
      },
      "put": {
        "description": "Updates existing practical assignments. Returns the updated practical assignments. Null values will wipe database table fields.",
        "operationId": "practicalAssignmentsUpdatePracticalAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated practical assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing practical assignments",
        "tags": ["Practical Assignments"]
      }
    },
    "/v1/practical-assignments/first-page": {
      "get": {
        "description": "Finds the first page of practical assignments. Returns practical assignments first page matching query paramenters.",
        "operationId": "practicalAssignmentsFindPracticalAssignmentsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPracticalAssignmentsReponse"
                }
              }
            },
            "description": "The existing practical assignments on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page practical assignments",
        "tags": ["Practical Assignments"]
      }
    },
    "/v1/practical-assignments/{practicalAssignmentId}": {
      "delete": {
        "description": "Deletes an existing practical assignment by id. Returns id of the deleted practical assignment.",
        "operationId": "practicalAssignmentsDeletePracticalAssignment",
        "parameters": [
          {
            "description": "The id of the practical assignment to be deleted.",
            "in": "path",
            "name": "practicalAssignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted practical assignment response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing practical assignment by id",
        "tags": ["Practical Assignments"]
      },
      "get": {
        "description": "Finds practical assignment by id. Returns practical assignment matching the given id.",
        "operationId": "practicalAssignmentsFindPracticalAssignmentById",
        "parameters": [
          {
            "description": "The id of the practical assignment to be found.",
            "in": "path",
            "name": "practicalAssignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PracticalAssignment" }
              }
            },
            "description": "The existing practical assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find practical assignment by id",
        "tags": ["Practical Assignments"]
      }
    },
    "/v1/practicals": {
      "get": {
        "description": "Finds all practicals. Returns practicals matching query paramenters.",
        "operationId": "practicalsFindAllPracticals",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPracticalsReponse"
                }
              }
            },
            "description": "The existing practicals"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all practicals",
        "tags": ["Practicals"]
      },
      "patch": {
        "description": "Patches an existing practical. Returns the patched practical.",
        "operationId": "practicalsPatchPractical",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Practical" }
              }
            },
            "description": "The patched practical"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing practical",
        "tags": ["Practicals"]
      },
      "post": {
        "description": "Creates new practical. Returns the created practical.",
        "operationId": "practicalsCreateNewPractical",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Practical" }
              }
            },
            "description": "The created practical"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new practical",
        "tags": ["Practicals"]
      },
      "put": {
        "description": "Updates an existing practical. Returns the updated practical. Null values will wipe database fields.",
        "operationId": "practicalsUpdatePractical",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Practical" }
              }
            },
            "description": "The updated practical"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing practical",
        "tags": ["Practicals"]
      }
    },
    "/v1/practicals/batch": {
      "delete": {
        "description": "Deletes existing practicals. Returns ids of the deleted practicals.",
        "operationId": "practicalsDeletePracticals",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the practicals to be deleted.\nNote: this list should contain at least one practical.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted practicals response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing practicals",
        "tags": ["Practicals"]
      },
      "patch": {
        "description": "Patches existing practicals. Returns the patched practicals.",
        "operationId": "practicalsPatchPracticals",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched practicals"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing practicals",
        "tags": ["Practicals"]
      },
      "post": {
        "description": "Creates new practicals. Returns the created practicals.",
        "operationId": "practicalsCreateNewPracticals",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created practicals"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new practicals",
        "tags": ["Practicals"]
      },
      "put": {
        "description": "Updates existing practicals. Returns the updated practicals. Null values will wipe database table fields.",
        "operationId": "practicalsUpdatePracticals",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated practicals"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing practicals",
        "tags": ["Practicals"]
      }
    },
    "/v1/practicals/first-page": {
      "get": {
        "description": "Finds the first page of practicals. Returns practicals first page matching query paramenters.",
        "operationId": "practicalsFindPracticalsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllPracticalsReponse"
                }
              }
            },
            "description": "The existing practicals on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page practicals",
        "tags": ["Practicals"]
      }
    },
    "/v1/practicals/{practicalId}": {
      "delete": {
        "description": "Deletes an existing practical by id. Returns id of the deleted practical.",
        "operationId": "practicalsDeletePractical",
        "parameters": [
          {
            "description": "The id of the practical to be deleted.",
            "in": "path",
            "name": "practicalId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted practical response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing practical by id",
        "tags": ["Practicals"]
      },
      "get": {
        "description": "Finds practical by id. Returns practical matching the given id.",
        "operationId": "practicalsFindPracticalById",
        "parameters": [
          {
            "description": "The id of the practical to be found.",
            "in": "path",
            "name": "practicalId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Practical" }
              }
            },
            "description": "The existing practical"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find practical by id",
        "tags": ["Practicals"]
      }
    },
    "/v1/projects": {
      "get": {
        "description": "Finds all projects. Returns projects matching query paramenters.",
        "operationId": "projectsFindAllProjects",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllProjectsReponse"
                }
              }
            },
            "description": "The existing projects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all projects",
        "tags": ["Projects"]
      },
      "patch": {
        "description": "Patches an existing project. Returns the patched project.",
        "operationId": "projectsPatchProject",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            },
            "description": "The patched project"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing project",
        "tags": ["Projects"]
      },
      "post": {
        "description": "Creates new project. Returns the created project.",
        "operationId": "projectsCreateNewProject",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            },
            "description": "The created project"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new project",
        "tags": ["Projects"]
      },
      "put": {
        "description": "Updates an existing project. Returns the updated project. Null values will wipe database fields.",
        "operationId": "projectsUpdateProject",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            },
            "description": "The updated project"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing project",
        "tags": ["Projects"]
      }
    },
    "/v1/projects/batch": {
      "delete": {
        "description": "Deletes existing projects. Returns ids of the deleted projects.",
        "operationId": "projectsDeleteProjects",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the projects to be deleted.\nNote: this list should contain at least one project.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted projects response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing projects",
        "tags": ["Projects"]
      },
      "patch": {
        "description": "Patches existing projects. Returns the patched projects.",
        "operationId": "projectsPatchProjects",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched projects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing projects",
        "tags": ["Projects"]
      },
      "post": {
        "description": "Creates new projects. Returns the created projects.",
        "operationId": "projectsCreateNewProjects",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created projects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new projects",
        "tags": ["Projects"]
      },
      "put": {
        "description": "Updates existing projects. Returns the updated projects. Null values will wipe database table fields.",
        "operationId": "projectsUpdateProjects",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated projects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing projects",
        "tags": ["Projects"]
      }
    },
    "/v1/projects/first-page": {
      "get": {
        "description": "Finds the first page of projects. Returns projects first page matching query paramenters.",
        "operationId": "projectsFindProjectsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllProjectsReponse"
                }
              }
            },
            "description": "The existing projects on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page projects",
        "tags": ["Projects"]
      }
    },
    "/v1/projects/{projectId}": {
      "delete": {
        "description": "Deletes an existing project by id. Returns id of the deleted project.",
        "operationId": "projectsDeleteProject",
        "parameters": [
          {
            "description": "The id of the project to be deleted.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted project response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing project by id",
        "tags": ["Projects"]
      },
      "get": {
        "description": "Finds project by id. Returns project matching the given id.",
        "operationId": "projectsFindProjectById",
        "parameters": [
          {
            "description": "The id of the project to be found.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            },
            "description": "The existing project"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find project by id",
        "tags": ["Projects"]
      }
    },
    "/v1/proxy": {
      "get": {
        "description": "Proxies GET requests to external application servers.",
        "operationId": "proxyServerProxy",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Success" } },
        "summary": "Proxy GET request",
        "tags": ["Proxy Server"]
      }
    },
    "/v1/reqs": {
      "get": {
        "description": "Finds all reqs. Returns reqs matching query paramenters.",
        "operationId": "reQsFindAllReQs",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllREQsReponse" }
              }
            },
            "description": "The existing reqs"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all reqs",
        "tags": ["REQs"]
      },
      "patch": {
        "description": "Patches an existing req. Returns the patched req.",
        "operationId": "reQsPatchReq",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/REQ" }
              }
            },
            "description": "The patched req"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing req",
        "tags": ["REQs"]
      },
      "post": {
        "description": "Creates new req. Returns the created req.",
        "operationId": "reQsCreateNewReq",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/REQ" }
              }
            },
            "description": "The created req"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new req",
        "tags": ["REQs"]
      },
      "put": {
        "description": "Updates an existing req. Returns the updated req. Null values will wipe database fields.",
        "operationId": "reQsUpdateReq",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/REQ" }
              }
            },
            "description": "The updated req"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing req",
        "tags": ["REQs"]
      }
    },
    "/v1/reqs/batch": {
      "delete": {
        "description": "Deletes existing reqs. Returns ids of the deleted reqs.",
        "operationId": "reQsDeleteReQs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the reqs to be deleted.\nNote: this list should contain at least one req.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted reqs response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing reqs",
        "tags": ["REQs"]
      },
      "patch": {
        "description": "Patches existing reqs. Returns the patched reqs.",
        "operationId": "reQsPatchReQs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched reqs"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing reqs",
        "tags": ["REQs"]
      },
      "post": {
        "description": "Creates new reqs. Returns the created reqs.",
        "operationId": "reQsCreateNewReQs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created reqs"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new reqs",
        "tags": ["REQs"]
      },
      "put": {
        "description": "Updates existing reqs. Returns the updated reqs. Null values will wipe database table fields.",
        "operationId": "reQsUpdateReQs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated reqs"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing reqs",
        "tags": ["REQs"]
      }
    },
    "/v1/reqs/first-page": {
      "get": {
        "description": "Finds the first page of reqs. Returns reqs first page matching query paramenters.",
        "operationId": "reQsFindReQsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllREQsReponse" }
              }
            },
            "description": "The existing reqs on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page reqs",
        "tags": ["REQs"]
      }
    },
    "/v1/reqs/{reqId}": {
      "delete": {
        "description": "Deletes an existing req by id. Returns id of the deleted req.",
        "operationId": "reQsDeleteReq",
        "parameters": [
          {
            "description": "The id of the req to be deleted.",
            "in": "path",
            "name": "reqId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted req response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing req by id",
        "tags": ["REQs"]
      },
      "get": {
        "description": "Finds req by id. Returns req matching the given id.",
        "operationId": "reQsFindReqById",
        "parameters": [
          {
            "description": "The id of the req to be found.",
            "in": "path",
            "name": "reqId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/REQ" }
              }
            },
            "description": "The existing req"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find req by id",
        "tags": ["REQs"]
      }
    },
    "/v1/roles": {
      "get": {
        "description": "Finds all roles. Returns roles matching query paramenters.",
        "operationId": "rolesFindAllRoles",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllRolesReponse" }
              }
            },
            "description": "The existing roles"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all roles",
        "tags": ["Roles"]
      },
      "patch": {
        "description": "Patches an existing role. Returns the patched role.",
        "operationId": "rolesPatchRole",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            },
            "description": "The patched role"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing role",
        "tags": ["Roles"]
      },
      "post": {
        "description": "Creates new role. Returns the created role.",
        "operationId": "rolesCreateNewRole",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            },
            "description": "The created role"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new role",
        "tags": ["Roles"]
      },
      "put": {
        "description": "Updates an existing role. Returns the updated role. Null values will wipe database fields.",
        "operationId": "rolesUpdateRole",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            },
            "description": "The updated role"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing role",
        "tags": ["Roles"]
      }
    },
    "/v1/roles/batch": {
      "delete": {
        "description": "Deletes existing roles. Returns ids of the deleted roles.",
        "operationId": "rolesDeleteRoles",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the roles to be deleted.\nNote: this list should contain at least one role.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted roles response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing roles",
        "tags": ["Roles"]
      },
      "patch": {
        "description": "Patches existing roles. Returns the patched roles.",
        "operationId": "rolesPatchRoles",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched roles"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing roles",
        "tags": ["Roles"]
      },
      "post": {
        "description": "Creates new roles. Returns the created roles.",
        "operationId": "rolesCreateNewRoles",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created roles"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new roles",
        "tags": ["Roles"]
      },
      "put": {
        "description": "Updates existing roles. Returns the updated roles. Null values will wipe database table fields.",
        "operationId": "rolesUpdateRoles",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated roles"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing roles",
        "tags": ["Roles"]
      }
    },
    "/v1/roles/first-page": {
      "get": {
        "description": "Finds the first page of roles. Returns roles first page matching query paramenters.",
        "operationId": "rolesFindRolesFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllRolesReponse" }
              }
            },
            "description": "The existing roles on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page roles",
        "tags": ["Roles"]
      }
    },
    "/v1/roles/{roleId}": {
      "delete": {
        "description": "Deletes an existing role by id. Returns id of the deleted role.",
        "operationId": "rolesDeleteRole",
        "parameters": [
          {
            "description": "The id of the role to be deleted.",
            "in": "path",
            "name": "roleId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted role response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing role by id",
        "tags": ["Roles"]
      },
      "get": {
        "description": "Finds role by id. Returns role matching the given id.",
        "operationId": "rolesFindRoleById",
        "parameters": [
          {
            "description": "The id of the role to be found.",
            "in": "path",
            "name": "roleId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            },
            "description": "The existing role"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find role by id",
        "tags": ["Roles"]
      }
    },
    "/v1/signups": {
      "get": {
        "description": "Finds all signups. Returns signups matching query paramenters.",
        "operationId": "signupsFindAllSignups",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllSignupsReponse"
                }
              }
            },
            "description": "The existing signups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all signups",
        "tags": ["Signups"]
      },
      "patch": {
        "description": "Patches an existing signup. Returns the patched signup.",
        "operationId": "signupsPatchSignup",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Signup" }
              }
            },
            "description": "The patched signup"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing signup",
        "tags": ["Signups"]
      },
      "post": {
        "description": "Creates new signup. Returns the created signup.",
        "operationId": "signupsCreateNewSignup",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Signup" }
              }
            },
            "description": "The created signup"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new signup",
        "tags": ["Signups"]
      },
      "put": {
        "description": "Updates an existing signup. Returns the updated signup. Null values will wipe database fields.",
        "operationId": "signupsUpdateSignup",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Signup" }
              }
            },
            "description": "The updated signup"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing signup",
        "tags": ["Signups"]
      }
    },
    "/v1/signups/batch": {
      "delete": {
        "description": "Deletes existing signups. Returns ids of the deleted signups.",
        "operationId": "signupsDeleteSignups",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the signups to be deleted.\nNote: this list should contain at least one signup.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted signups response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing signups",
        "tags": ["Signups"]
      },
      "patch": {
        "description": "Patches existing signups. Returns the patched signups.",
        "operationId": "signupsPatchSignups",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched signups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing signups",
        "tags": ["Signups"]
      },
      "post": {
        "description": "Creates new signups. Returns the created signups.",
        "operationId": "signupsCreateNewSignups",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created signups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new signups",
        "tags": ["Signups"]
      },
      "put": {
        "description": "Updates existing signups. Returns the updated signups. Null values will wipe database table fields.",
        "operationId": "signupsUpdateSignups",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated signups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing signups",
        "tags": ["Signups"]
      }
    },
    "/v1/signups/first-page": {
      "get": {
        "description": "Finds the first page of signups. Returns signups first page matching query paramenters.",
        "operationId": "signupsFindSignupsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllSignupsReponse"
                }
              }
            },
            "description": "The existing signups on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page signups",
        "tags": ["Signups"]
      }
    },
    "/v1/signups/{signupId}": {
      "delete": {
        "description": "Deletes an existing signup by id. Returns id of the deleted signup.",
        "operationId": "signupsDeleteSignup",
        "parameters": [
          {
            "description": "The id of the signup to be deleted.",
            "in": "path",
            "name": "signupId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted signup response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing signup by id",
        "tags": ["Signups"]
      },
      "get": {
        "description": "Finds signup by id. Returns signup matching the given id.",
        "operationId": "signupsFindSignupById",
        "parameters": [
          {
            "description": "The id of the signup to be found.",
            "in": "path",
            "name": "signupId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Signup" }
              }
            },
            "description": "The existing signup"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find signup by id",
        "tags": ["Signups"]
      }
    },
    "/v1/sows": {
      "get": {
        "description": "Finds all sows. Returns sows matching query paramenters.",
        "operationId": "soWsFindAllSoWs",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllSOWsReponse" }
              }
            },
            "description": "The existing sows"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all sows",
        "tags": ["SOWs"]
      },
      "patch": {
        "description": "Patches an existing sow. Returns the patched sow.",
        "operationId": "soWsPatchSow",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SOW" }
              }
            },
            "description": "The patched sow"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing sow",
        "tags": ["SOWs"]
      },
      "post": {
        "description": "Creates new sow. Returns the created sow.",
        "operationId": "soWsCreateNewSow",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SOW" }
              }
            },
            "description": "The created sow"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new sow",
        "tags": ["SOWs"]
      },
      "put": {
        "description": "Updates an existing sow. Returns the updated sow. Null values will wipe database fields.",
        "operationId": "soWsUpdateSow",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SOW" }
              }
            },
            "description": "The updated sow"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing sow",
        "tags": ["SOWs"]
      }
    },
    "/v1/sows/batch": {
      "delete": {
        "description": "Deletes existing sows. Returns ids of the deleted sows.",
        "operationId": "soWsDeleteSoWs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the sows to be deleted.\nNote: this list should contain at least one sow.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted sows response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing sows",
        "tags": ["SOWs"]
      },
      "patch": {
        "description": "Patches existing sows. Returns the patched sows.",
        "operationId": "soWsPatchSoWs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched sows"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing sows",
        "tags": ["SOWs"]
      },
      "post": {
        "description": "Creates new sows. Returns the created sows.",
        "operationId": "soWsCreateNewSoWs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created sows"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new sows",
        "tags": ["SOWs"]
      },
      "put": {
        "description": "Updates existing sows. Returns the updated sows. Null values will wipe database table fields.",
        "operationId": "soWsUpdateSoWs",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated sows"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing sows",
        "tags": ["SOWs"]
      }
    },
    "/v1/sows/first-page": {
      "get": {
        "description": "Finds the first page of sows. Returns sows first page matching query paramenters.",
        "operationId": "soWsFindSoWsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllSOWsReponse" }
              }
            },
            "description": "The existing sows on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page sows",
        "tags": ["SOWs"]
      }
    },
    "/v1/sows/{sowId}": {
      "delete": {
        "description": "Deletes an existing sow by id. Returns id of the deleted sow.",
        "operationId": "soWsDeleteSow",
        "parameters": [
          {
            "description": "The id of the sow to be deleted.",
            "in": "path",
            "name": "sowId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted sow response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing sow by id",
        "tags": ["SOWs"]
      },
      "get": {
        "description": "Finds sow by id. Returns sow matching the given id.",
        "operationId": "soWsFindSowById",
        "parameters": [
          {
            "description": "The id of the sow to be found.",
            "in": "path",
            "name": "sowId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SOW" }
              }
            },
            "description": "The existing sow"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find sow by id",
        "tags": ["SOWs"]
      }
    },
    "/v1/states": {
      "get": {
        "description": "Finds all states. Returns states matching query paramenters.",
        "operationId": "statesFindAllStates",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllStatesReponse"
                }
              }
            },
            "description": "The existing states"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all states",
        "tags": ["States"]
      },
      "patch": {
        "description": "Patches an existing state. Returns the patched state.",
        "operationId": "statesPatchState",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/State" }
              }
            },
            "description": "The patched state"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing state",
        "tags": ["States"]
      },
      "post": {
        "description": "Creates new state. Returns the created state.",
        "operationId": "statesCreateNewState",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/State" }
              }
            },
            "description": "The created state"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new state",
        "tags": ["States"]
      },
      "put": {
        "description": "Updates an existing state. Returns the updated state. Null values will wipe database fields.",
        "operationId": "statesUpdateState",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/State" }
              }
            },
            "description": "The updated state"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing state",
        "tags": ["States"]
      }
    },
    "/v1/states/batch": {
      "delete": {
        "description": "Deletes existing states. Returns ids of the deleted states.",
        "operationId": "statesDeleteStates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the states to be deleted.\nNote: this list should contain at least one state.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted states response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing states",
        "tags": ["States"]
      },
      "patch": {
        "description": "Patches existing states. Returns the patched states.",
        "operationId": "statesPatchStates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched states"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing states",
        "tags": ["States"]
      },
      "post": {
        "description": "Creates new states. Returns the created states.",
        "operationId": "statesCreateNewStates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created states"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new states",
        "tags": ["States"]
      },
      "put": {
        "description": "Updates existing states. Returns the updated states. Null values will wipe database table fields.",
        "operationId": "statesUpdateStates",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated states"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing states",
        "tags": ["States"]
      }
    },
    "/v1/states/first-page": {
      "get": {
        "description": "Finds the first page of states. Returns states first page matching query paramenters.",
        "operationId": "statesFindStatesFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllStatesReponse"
                }
              }
            },
            "description": "The existing states on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page states",
        "tags": ["States"]
      }
    },
    "/v1/states/{stateId}": {
      "delete": {
        "description": "Deletes an existing state by id. Returns id of the deleted state.",
        "operationId": "statesDeleteState",
        "parameters": [
          {
            "description": "The id of the state to be deleted.",
            "in": "path",
            "name": "stateId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted state response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing state by id",
        "tags": ["States"]
      },
      "get": {
        "description": "Finds state by id. Returns state matching the given id.",
        "operationId": "statesFindStateById",
        "parameters": [
          {
            "description": "The id of the state to be found.",
            "in": "path",
            "name": "stateId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/State" }
              }
            },
            "description": "The existing state"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find state by id",
        "tags": ["States"]
      }
    },
    "/v1/team-assignments": {
      "get": {
        "description": "Finds all team assignments. Returns team assignments matching query paramenters.",
        "operationId": "teamAssignmentsFindAllTeamAssignments",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamAssignmentsReponse"
                }
              }
            },
            "description": "The existing team assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all team assignments",
        "tags": ["Team Assignments"]
      },
      "patch": {
        "description": "Patches an existing team assignment. Returns the patched team assignment.",
        "operationId": "teamAssignmentsPatchTeamAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamAssignment" }
              }
            },
            "description": "The patched team assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team assignment",
        "tags": ["Team Assignments"]
      },
      "post": {
        "description": "Creates new team assignment. Returns the created team assignment.",
        "operationId": "teamAssignmentsCreateNewTeamAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamAssignment" }
              }
            },
            "description": "The created team assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team assignment",
        "tags": ["Team Assignments"]
      },
      "put": {
        "description": "Updates an existing team assignment. Returns the updated team assignment. Null values will wipe database fields.",
        "operationId": "teamAssignmentsUpdateTeamAssignment",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamAssignment" }
              }
            },
            "description": "The updated team assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team assignment",
        "tags": ["Team Assignments"]
      }
    },
    "/v1/team-assignments/batch": {
      "delete": {
        "description": "Deletes existing team assignments. Returns ids of the deleted team assignments.",
        "operationId": "teamAssignmentsDeleteTeamAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the team assignments to be deleted.\nNote: this list should contain at least one team assignment.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted team assignments response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team assignments",
        "tags": ["Team Assignments"]
      },
      "patch": {
        "description": "Patches existing team assignments. Returns the patched team assignments.",
        "operationId": "teamAssignmentsPatchTeamAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched team assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team assignments",
        "tags": ["Team Assignments"]
      },
      "post": {
        "description": "Creates new team assignments. Returns the created team assignments.",
        "operationId": "teamAssignmentsCreateNewTeamAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created team assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team assignments",
        "tags": ["Team Assignments"]
      },
      "put": {
        "description": "Updates existing team assignments. Returns the updated team assignments. Null values will wipe database table fields.",
        "operationId": "teamAssignmentsUpdateTeamAssignments",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated team assignments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team assignments",
        "tags": ["Team Assignments"]
      }
    },
    "/v1/team-assignments/first-page": {
      "get": {
        "description": "Finds the first page of team assignments. Returns team assignments first page matching query paramenters.",
        "operationId": "teamAssignmentsFindTeamAssignmentsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamAssignmentsReponse"
                }
              }
            },
            "description": "The existing team assignments on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page team assignments",
        "tags": ["Team Assignments"]
      }
    },
    "/v1/team-assignments/{teamAssignmentId}": {
      "delete": {
        "description": "Deletes an existing team assignment by id. Returns id of the deleted team assignment.",
        "operationId": "teamAssignmentsDeleteTeamAssignment",
        "parameters": [
          {
            "description": "The id of the team assignment to be deleted.",
            "in": "path",
            "name": "teamAssignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted team assignment response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team assignment by id",
        "tags": ["Team Assignments"]
      },
      "get": {
        "description": "Finds team assignment by id. Returns team assignment matching the given id.",
        "operationId": "teamAssignmentsFindTeamAssignmentById",
        "parameters": [
          {
            "description": "The id of the team assignment to be found.",
            "in": "path",
            "name": "teamAssignmentId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamAssignment" }
              }
            },
            "description": "The existing team assignment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find team assignment by id",
        "tags": ["Team Assignments"]
      }
    },
    "/v1/team-member-types": {
      "get": {
        "description": "Finds all team member types. Returns team member types matching query paramenters.",
        "operationId": "teamMemberTypesFindAllTeamMemberTypes",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamMemberTypesReponse"
                }
              }
            },
            "description": "The existing team member types"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all team member types",
        "tags": ["Team Member Types"]
      },
      "patch": {
        "description": "Patches an existing team member type. Returns the patched team member type.",
        "operationId": "teamMemberTypesPatchTeamMemberType",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberType" }
              }
            },
            "description": "The patched team member type"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team member type",
        "tags": ["Team Member Types"]
      },
      "post": {
        "description": "Creates new team member type. Returns the created team member type.",
        "operationId": "teamMemberTypesCreateNewTeamMemberType",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberType" }
              }
            },
            "description": "The created team member type"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team member type",
        "tags": ["Team Member Types"]
      },
      "put": {
        "description": "Updates an existing team member type. Returns the updated team member type. Null values will wipe database fields.",
        "operationId": "teamMemberTypesUpdateTeamMemberType",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberType" }
              }
            },
            "description": "The updated team member type"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team member type",
        "tags": ["Team Member Types"]
      }
    },
    "/v1/team-member-types/batch": {
      "delete": {
        "description": "Deletes existing team member types. Returns ids of the deleted team member types.",
        "operationId": "teamMemberTypesDeleteTeamMemberTypes",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the team member types to be deleted.\nNote: this list should contain at least one team member type.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted team member types response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team member types",
        "tags": ["Team Member Types"]
      },
      "patch": {
        "description": "Patches existing team member types. Returns the patched team member types.",
        "operationId": "teamMemberTypesPatchTeamMemberTypes",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched team member types"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team member types",
        "tags": ["Team Member Types"]
      },
      "post": {
        "description": "Creates new team member types. Returns the created team member types.",
        "operationId": "teamMemberTypesCreateNewTeamMemberTypes",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created team member types"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team member types",
        "tags": ["Team Member Types"]
      },
      "put": {
        "description": "Updates existing team member types. Returns the updated team member types. Null values will wipe database table fields.",
        "operationId": "teamMemberTypesUpdateTeamMemberTypes",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated team member types"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team member types",
        "tags": ["Team Member Types"]
      }
    },
    "/v1/team-member-types/first-page": {
      "get": {
        "description": "Finds the first page of team member types. Returns team member types first page matching query paramenters.",
        "operationId": "teamMemberTypesFindTeamMemberTypesFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamMemberTypesReponse"
                }
              }
            },
            "description": "The existing team member types on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page team member types",
        "tags": ["Team Member Types"]
      }
    },
    "/v1/team-member-types/{teamMemberTypeId}": {
      "delete": {
        "description": "Deletes an existing team member type by id. Returns id of the deleted team member type.",
        "operationId": "teamMemberTypesDeleteTeamMemberType",
        "parameters": [
          {
            "description": "The id of the team member type to be deleted.",
            "in": "path",
            "name": "teamMemberTypeId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted team member type response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team member type by id",
        "tags": ["Team Member Types"]
      },
      "get": {
        "description": "Finds team member type by id. Returns team member type matching the given id.",
        "operationId": "teamMemberTypesFindTeamMemberTypeById",
        "parameters": [
          {
            "description": "The id of the team member type to be found.",
            "in": "path",
            "name": "teamMemberTypeId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberType" }
              }
            },
            "description": "The existing team member type"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find team member type by id",
        "tags": ["Team Member Types"]
      }
    },
    "/v1/team-members": {
      "get": {
        "description": "Finds all team members. Returns team members matching query paramenters.",
        "operationId": "teamMembersFindAllTeamMembers",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamMembersReponse"
                }
              }
            },
            "description": "The existing team members"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all team members",
        "tags": ["Team Members"]
      },
      "patch": {
        "description": "Patches an existing team member. Returns the patched team member.",
        "operationId": "teamMembersPatchTeamMember",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            },
            "description": "The patched team member"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team member",
        "tags": ["Team Members"]
      },
      "post": {
        "description": "Creates new team member. Returns the created team member.",
        "operationId": "teamMembersCreateNewTeamMember",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            },
            "description": "The created team member"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team member",
        "tags": ["Team Members"]
      },
      "put": {
        "description": "Updates an existing team member. Returns the updated team member. Null values will wipe database fields.",
        "operationId": "teamMembersUpdateTeamMember",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            },
            "description": "The updated team member"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team member",
        "tags": ["Team Members"]
      }
    },
    "/v1/team-members/batch": {
      "delete": {
        "description": "Deletes existing team members. Returns ids of the deleted team members.",
        "operationId": "teamMembersDeleteTeamMembers",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the team members to be deleted.\nNote: this list should contain at least one team member.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted team members response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team members",
        "tags": ["Team Members"]
      },
      "patch": {
        "description": "Patches existing team members. Returns the patched team members.",
        "operationId": "teamMembersPatchTeamMembers",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched team members"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team members",
        "tags": ["Team Members"]
      },
      "post": {
        "description": "Creates new team members. Returns the created team members.",
        "operationId": "teamMembersCreateNewTeamMembers",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created team members"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team members",
        "tags": ["Team Members"]
      },
      "put": {
        "description": "Updates existing team members. Returns the updated team members. Null values will wipe database table fields.",
        "operationId": "teamMembersUpdateTeamMembers",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated team members"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team members",
        "tags": ["Team Members"]
      }
    },
    "/v1/team-members/first-page": {
      "get": {
        "description": "Finds the first page of team members. Returns team members first page matching query paramenters.",
        "operationId": "teamMembersFindTeamMembersFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTeamMembersReponse"
                }
              }
            },
            "description": "The existing team members on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page team members",
        "tags": ["Team Members"]
      }
    },
    "/v1/team-members/{teamMemberId}": {
      "delete": {
        "description": "Deletes an existing team member by id. Returns id of the deleted team member.",
        "operationId": "teamMembersDeleteTeamMember",
        "parameters": [
          {
            "description": "The id of the team member to be deleted.",
            "in": "path",
            "name": "teamMemberId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted team member response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team member by id",
        "tags": ["Team Members"]
      },
      "get": {
        "description": "Finds team member by id. Returns team member matching the given id.",
        "operationId": "teamMembersFindTeamMemberById",
        "parameters": [
          {
            "description": "The id of the team member to be found.",
            "in": "path",
            "name": "teamMemberId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            },
            "description": "The existing team member"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find team member by id",
        "tags": ["Team Members"]
      }
    },
    "/v1/teams": {
      "get": {
        "description": "Finds all teams. Returns teams matching query paramenters.",
        "operationId": "teamsFindAllTeams",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllTeamsReponse" }
              }
            },
            "description": "The existing teams"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all teams",
        "tags": ["Teams"]
      },
      "patch": {
        "description": "Patches an existing team. Returns the patched team.",
        "operationId": "teamsPatchTeam",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Team" }
              }
            },
            "description": "The patched team"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing team",
        "tags": ["Teams"]
      },
      "post": {
        "description": "Creates new team. Returns the created team.",
        "operationId": "teamsCreateNewTeam",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Team" }
              }
            },
            "description": "The created team"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new team",
        "tags": ["Teams"]
      },
      "put": {
        "description": "Updates an existing team. Returns the updated team. Null values will wipe database fields.",
        "operationId": "teamsUpdateTeam",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Team" }
              }
            },
            "description": "The updated team"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing team",
        "tags": ["Teams"]
      }
    },
    "/v1/teams/batch": {
      "delete": {
        "description": "Deletes existing teams. Returns ids of the deleted teams.",
        "operationId": "teamsDeleteTeams",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the teams to be deleted.\nNote: this list should contain at least one team.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted teams response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing teams",
        "tags": ["Teams"]
      },
      "patch": {
        "description": "Patches existing teams. Returns the patched teams.",
        "operationId": "teamsPatchTeams",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched teams"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing teams",
        "tags": ["Teams"]
      },
      "post": {
        "description": "Creates new teams. Returns the created teams.",
        "operationId": "teamsCreateNewTeams",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created teams"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new teams",
        "tags": ["Teams"]
      },
      "put": {
        "description": "Updates existing teams. Returns the updated teams. Null values will wipe database table fields.",
        "operationId": "teamsUpdateTeams",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated teams"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing teams",
        "tags": ["Teams"]
      }
    },
    "/v1/teams/first-page": {
      "get": {
        "description": "Finds the first page of teams. Returns teams first page matching query paramenters.",
        "operationId": "teamsFindTeamsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FindAllTeamsReponse" }
              }
            },
            "description": "The existing teams on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page teams",
        "tags": ["Teams"]
      }
    },
    "/v1/teams/{teamId}": {
      "delete": {
        "description": "Deletes an existing team by id. Returns id of the deleted team.",
        "operationId": "teamsDeleteTeam",
        "parameters": [
          {
            "description": "The id of the team to be deleted.",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted team response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing team by id",
        "tags": ["Teams"]
      },
      "get": {
        "description": "Finds team by id. Returns team matching the given id.",
        "operationId": "teamsFindTeamById",
        "parameters": [
          {
            "description": "The id of the team to be found.",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Team" }
              }
            },
            "description": "The existing team"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find team by id",
        "tags": ["Teams"]
      }
    },
    "/v1/topology-permissions": {
      "get": {
        "description": "Finds all topology permissions. Returns topology permissions matching query paramenters.",
        "operationId": "topologyPermissionsFindAllTopologyPermissions",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTopologyPermissionsReponse"
                }
              }
            },
            "description": "The existing topology permissions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find all topology permissions",
        "tags": ["Topology Permissions"]
      },
      "patch": {
        "description": "Patches an existing topology permission. Returns the patched topology permission.",
        "operationId": "topologyPermissionsPatchTopologyPermission",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopologyPermission" }
              }
            },
            "description": "The patched topology permission"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing topology permission",
        "tags": ["Topology Permissions"]
      },
      "post": {
        "description": "Creates new topology permission. Returns the created topology permission.",
        "operationId": "topologyPermissionsCreateNewTopologyPermission",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopologyPermission" }
              }
            },
            "description": "The created topology permission"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new topology permission",
        "tags": ["Topology Permissions"]
      },
      "put": {
        "description": "Updates an existing topology permission. Returns the updated topology permission. Null values will wipe database fields.",
        "operationId": "topologyPermissionsUpdateTopologyPermission",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopologyPermission" }
              }
            },
            "description": "The updated topology permission"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing topology permission",
        "tags": ["Topology Permissions"]
      }
    },
    "/v1/topology-permissions/batch": {
      "delete": {
        "description": "Deletes existing topology permissions. Returns ids of the deleted topology permissions.",
        "operationId": "topologyPermissionsDeleteTopologyPermissions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": ["recO0FYb1Tccm9MZ2"],
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "description": "The list of ids of the topology permissions to be deleted.\nNote: this list should contain at least one topology permission.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The deleted topology permissions response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing topology permissions",
        "tags": ["Topology Permissions"]
      },
      "patch": {
        "description": "Patches existing topology permissions. Returns the patched topology permissions.",
        "operationId": "topologyPermissionsPatchTopologyPermissions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The patched topology permissions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Patch existing topology permissions",
        "tags": ["Topology Permissions"]
      },
      "post": {
        "description": "Creates new topology permissions. Returns the created topology permissions.",
        "operationId": "topologyPermissionsCreateNewTopologyPermissions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The created topology permissions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create new topology permissions",
        "tags": ["Topology Permissions"]
      },
      "put": {
        "description": "Updates existing topology permissions. Returns the updated topology permissions. Null values will wipe database table fields.",
        "operationId": "topologyPermissionsUpdateTopologyPermissions",
        "parameters": [
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "nullable": true,
                  "oneOf": [
                    { "type": "integer" },
                    { "type": "number" },
                    { "type": "string" },
                    { "type": "boolean" },
                    { "type": "array" },
                    { "type": "object" }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "The updated topology permissions"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnprocessableEntity" }
              }
            },
            "description": "Unprocessable Request"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update existing topology permissions",
        "tags": ["Topology Permissions"]
      }
    },
    "/v1/topology-permissions/first-page": {
      "get": {
        "description": "Finds the first page of topology permissions. Returns topology permissions first page matching query paramenters.",
        "operationId": "topologyPermissionsFindTopologyPermissionsFirstPage",
        "parameters": [
          {
            "description": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\n\nFor example, to only return data from Name and Status, send these two query parameters:\n\nfields%5B%5D=Name&fields%5B%5D=Status\nYou can also perform the same action with field ids (they can be found in the fields section):\n\nfields%5B%5D=fldG9yBafL709WagC&fields%5B%5D=fldySXPDpkljy1BCq\nNote: %5B%5D may be omitted when specifying multiple fields, but must always be included when specifying only a single field.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": { "title": "fields", "type": "array" }
          },
          {
            "description": "A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response. We recommend testing your formula in the Formula field UI before using it in your API request.\n\nIf combined with the view parameter, only records in that view which satisfy the formula will be returned.\n\nThe formula must be encoded first before passing it as a value. You can use this tool to not only encode the formula but also create the entire url you need. For example, to only include records where Name isn't empty, pass in NOT({Name} = '') as a parameter like this:\n\nfilterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29",
            "in": "query",
            "name": "filterByFormula",
            "required": false,
            "schema": { "title": "filterByFormula", "type": "string" }
          },
          {
            "description": "The maximum total number of records that will be returned in your requests. If this value is larger than pageSize (which is 100 by default), you may have to load multiple pages to reach this total. See the Pagination section below for more.",
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": { "title": "maxRecords", "type": "number" }
          },
          {
            "description": "The number of records returned in each request. Must be less than or equal to 100. Default is 100. See the Pagination section below for more.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "default": 100, "title": "pageSize", "type": "number" }
          },
          {
            "description": "A list of sort objects that specifies how the records will be ordered. Each sort object must have a field key specifying the name of the field to sort on, and an optional direction key that is either \"asc\" or \"desc\". The default direction is \"asc\".\n\nThe sort parameter overrides the sorting of the view specified in the view parameter. If neither the sort nor the view parameter is included, the order of records is arbitrary.\n\nFor example, to sort records by name in descending order, send these two query parameters:\n\nsort%5B0%5D%5Bfield%5D=name\nsort%5B0%5D%5Bdirection%5D=desc",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": { "title": "sort", "type": "array" }
          },
          {
            "description": "The name or ID of a view in the table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view unless the sort parameter is included, which overrides that order. Fields hidden in this view will be returned in the results. To only return a subset of fields, use the fields parameter.",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": { "title": "view", "type": "string" }
          },
          {
            "description": "The format that should be used for cell values. Supported values are:\n\njson: cells will be formatted as JSON, depending on the field type.\n\nstring: cells will be formatted as user-facing strings, regardless of the field type. The timeZone and userLocale parameters are required when using string as the cellFormat.",
            "in": "query",
            "name": "cellFormat",
            "required": false,
            "schema": { "title": "cellFormat", "type": "string" }
          },
          {
            "description": "The time zone that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "timeZone",
            "required": false,
            "schema": { "title": "timeZone", "type": "string" }
          },
          {
            "description": "The user locale that should be used to format dates when using string as the cellFormat. This parameter is required when using string as the cellFormat.",
            "in": "query",
            "name": "userLocale",
            "required": false,
            "schema": { "title": "userLocale", "type": "string" }
          },
          {
            "description": "The airtable offset to load the next page.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "title": "offset", "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllTopologyPermissionsReponse"
                }
              }
            },
            "description": "The existing topology permissions on the first page"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find first page topology permissions",
        "tags": ["Topology Permissions"]
      }
    },
    "/v1/topology-permissions/{topologyPermissionId}": {
      "delete": {
        "description": "Deletes an existing topology permission by id. Returns id of the deleted topology permission.",
        "operationId": "topologyPermissionsDeleteTopologyPermission",
        "parameters": [
          {
            "description": "The id of the topology permission to be deleted.",
            "in": "path",
            "name": "topologyPermissionId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAirtableRecordResponse"
                }
              }
            },
            "description": "The deleted topology permission response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete existing topology permission by id",
        "tags": ["Topology Permissions"]
      },
      "get": {
        "description": "Finds topology permission by id. Returns topology permission matching the given id.",
        "operationId": "topologyPermissionsFindTopologyPermissionById",
        "parameters": [
          {
            "description": "The id of the topology permission to be found.",
            "in": "path",
            "name": "topologyPermissionId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "JWT authorization",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopologyPermission" }
              }
            },
            "description": "The existing topology permission"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            },
            "description": "Not found"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Find topology permission by id",
        "tags": ["Topology Permissions"]
      }
    }
  },
  "security": [{ "BearerAuth": [] }],
  "tags": [
    { "name": "HealthCheck" },
    { "name": "Auth" },
    { "name": "Assignments" },
    { "name": "Candidates" },
    { "name": "Clients" },
    { "name": "Countries" },
    { "name": "Departments" },
    { "name": "Feedbacks" },
    { "name": "Interviews" },
    { "name": "Positions" },
    { "name": "Practical Assignments" },
    { "name": "Practicals" },
    { "name": "Projects" },
    { "name": "REQs" },
    { "name": "Roles" },
    { "name": "SOWs" },
    { "name": "Signups" },
    { "name": "States" },
    { "name": "Team Assignments" },
    { "name": "Teams" },
    { "name": "Team Members" },
    { "name": "Team Member Types" },
    { "name": "Topology Permissions" },
    { "name": "Proxy Server" }
  ]
}
